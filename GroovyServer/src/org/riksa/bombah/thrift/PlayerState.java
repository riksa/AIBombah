/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.riksa.bombah.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PlayerState implements org.apache.thrift.TBase<PlayerState, PlayerState._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PlayerState");

  private static final org.apache.thrift.protocol.TField BOMB_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("bomb_size", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField BOMB_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("bomb_amount", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField FOOT_FIELD_DESC = new org.apache.thrift.protocol.TField("foot", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField CHAIN_FIELD_DESC = new org.apache.thrift.protocol.TField("chain", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField DISEASE_FIELD_DESC = new org.apache.thrift.protocol.TField("disease", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField ALIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("alive", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField X_COORDINATE_FIELD_DESC = new org.apache.thrift.protocol.TField("xCoordinate", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField Y_COORDINATE_FIELD_DESC = new org.apache.thrift.protocol.TField("yCoordinate", org.apache.thrift.protocol.TType.DOUBLE, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PlayerStateStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PlayerStateTupleSchemeFactory());
  }

  public int bomb_size; // required
  public int bomb_amount; // required
  public boolean foot; // required
  public boolean chain; // required
  /**
   * 
   * @see Disease
   */
  public Disease disease; // required
  public boolean alive; // required
  public double xCoordinate; // required
  public double yCoordinate; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BOMB_SIZE((short)1, "bomb_size"),
    BOMB_AMOUNT((short)2, "bomb_amount"),
    FOOT((short)3, "foot"),
    CHAIN((short)4, "chain"),
    /**
     * 
     * @see Disease
     */
    DISEASE((short)5, "disease"),
    ALIVE((short)6, "alive"),
    X_COORDINATE((short)7, "xCoordinate"),
    Y_COORDINATE((short)8, "yCoordinate");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BOMB_SIZE
          return BOMB_SIZE;
        case 2: // BOMB_AMOUNT
          return BOMB_AMOUNT;
        case 3: // FOOT
          return FOOT;
        case 4: // CHAIN
          return CHAIN;
        case 5: // DISEASE
          return DISEASE;
        case 6: // ALIVE
          return ALIVE;
        case 7: // X_COORDINATE
          return X_COORDINATE;
        case 8: // Y_COORDINATE
          return Y_COORDINATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BOMB_SIZE_ISSET_ID = 0;
  private static final int __BOMB_AMOUNT_ISSET_ID = 1;
  private static final int __FOOT_ISSET_ID = 2;
  private static final int __CHAIN_ISSET_ID = 3;
  private static final int __ALIVE_ISSET_ID = 4;
  private static final int __XCOORDINATE_ISSET_ID = 5;
  private static final int __YCOORDINATE_ISSET_ID = 6;
  private BitSet __isset_bit_vector = new BitSet(7);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BOMB_SIZE, new org.apache.thrift.meta_data.FieldMetaData("bomb_size", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BOMB_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("bomb_amount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FOOT, new org.apache.thrift.meta_data.FieldMetaData("foot", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CHAIN, new org.apache.thrift.meta_data.FieldMetaData("chain", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DISEASE, new org.apache.thrift.meta_data.FieldMetaData("disease", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Disease.class)));
    tmpMap.put(_Fields.ALIVE, new org.apache.thrift.meta_data.FieldMetaData("alive", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.X_COORDINATE, new org.apache.thrift.meta_data.FieldMetaData("xCoordinate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.Y_COORDINATE, new org.apache.thrift.meta_data.FieldMetaData("yCoordinate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PlayerState.class, metaDataMap);
  }

  public PlayerState() {
  }

  public PlayerState(
    int bomb_size,
    int bomb_amount,
    boolean foot,
    boolean chain,
    Disease disease,
    boolean alive,
    double xCoordinate,
    double yCoordinate)
  {
    this();
    this.bomb_size = bomb_size;
    setBomb_sizeIsSet(true);
    this.bomb_amount = bomb_amount;
    setBomb_amountIsSet(true);
    this.foot = foot;
    setFootIsSet(true);
    this.chain = chain;
    setChainIsSet(true);
    this.disease = disease;
    this.alive = alive;
    setAliveIsSet(true);
    this.xCoordinate = xCoordinate;
    setXCoordinateIsSet(true);
    this.yCoordinate = yCoordinate;
    setYCoordinateIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PlayerState(PlayerState other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.bomb_size = other.bomb_size;
    this.bomb_amount = other.bomb_amount;
    this.foot = other.foot;
    this.chain = other.chain;
    if (other.isSetDisease()) {
      this.disease = other.disease;
    }
    this.alive = other.alive;
    this.xCoordinate = other.xCoordinate;
    this.yCoordinate = other.yCoordinate;
  }

  public PlayerState deepCopy() {
    return new PlayerState(this);
  }

  @Override
  public void clear() {
    setBomb_sizeIsSet(false);
    this.bomb_size = 0;
    setBomb_amountIsSet(false);
    this.bomb_amount = 0;
    setFootIsSet(false);
    this.foot = false;
    setChainIsSet(false);
    this.chain = false;
    this.disease = null;
    setAliveIsSet(false);
    this.alive = false;
    setXCoordinateIsSet(false);
    this.xCoordinate = 0.0;
    setYCoordinateIsSet(false);
    this.yCoordinate = 0.0;
  }

  public int getBomb_size() {
    return this.bomb_size;
  }

  public PlayerState setBomb_size(int bomb_size) {
    this.bomb_size = bomb_size;
    setBomb_sizeIsSet(true);
    return this;
  }

  public void unsetBomb_size() {
    __isset_bit_vector.clear(__BOMB_SIZE_ISSET_ID);
  }

  /** Returns true if field bomb_size is set (has been assigned a value) and false otherwise */
  public boolean isSetBomb_size() {
    return __isset_bit_vector.get(__BOMB_SIZE_ISSET_ID);
  }

  public void setBomb_sizeIsSet(boolean value) {
    __isset_bit_vector.set(__BOMB_SIZE_ISSET_ID, value);
  }

  public int getBomb_amount() {
    return this.bomb_amount;
  }

  public PlayerState setBomb_amount(int bomb_amount) {
    this.bomb_amount = bomb_amount;
    setBomb_amountIsSet(true);
    return this;
  }

  public void unsetBomb_amount() {
    __isset_bit_vector.clear(__BOMB_AMOUNT_ISSET_ID);
  }

  /** Returns true if field bomb_amount is set (has been assigned a value) and false otherwise */
  public boolean isSetBomb_amount() {
    return __isset_bit_vector.get(__BOMB_AMOUNT_ISSET_ID);
  }

  public void setBomb_amountIsSet(boolean value) {
    __isset_bit_vector.set(__BOMB_AMOUNT_ISSET_ID, value);
  }

  public boolean isFoot() {
    return this.foot;
  }

  public PlayerState setFoot(boolean foot) {
    this.foot = foot;
    setFootIsSet(true);
    return this;
  }

  public void unsetFoot() {
    __isset_bit_vector.clear(__FOOT_ISSET_ID);
  }

  /** Returns true if field foot is set (has been assigned a value) and false otherwise */
  public boolean isSetFoot() {
    return __isset_bit_vector.get(__FOOT_ISSET_ID);
  }

  public void setFootIsSet(boolean value) {
    __isset_bit_vector.set(__FOOT_ISSET_ID, value);
  }

  public boolean isChain() {
    return this.chain;
  }

  public PlayerState setChain(boolean chain) {
    this.chain = chain;
    setChainIsSet(true);
    return this;
  }

  public void unsetChain() {
    __isset_bit_vector.clear(__CHAIN_ISSET_ID);
  }

  /** Returns true if field chain is set (has been assigned a value) and false otherwise */
  public boolean isSetChain() {
    return __isset_bit_vector.get(__CHAIN_ISSET_ID);
  }

  public void setChainIsSet(boolean value) {
    __isset_bit_vector.set(__CHAIN_ISSET_ID, value);
  }

  /**
   * 
   * @see Disease
   */
  public Disease getDisease() {
    return this.disease;
  }

  /**
   * 
   * @see Disease
   */
  public PlayerState setDisease(Disease disease) {
    this.disease = disease;
    return this;
  }

  public void unsetDisease() {
    this.disease = null;
  }

  /** Returns true if field disease is set (has been assigned a value) and false otherwise */
  public boolean isSetDisease() {
    return this.disease != null;
  }

  public void setDiseaseIsSet(boolean value) {
    if (!value) {
      this.disease = null;
    }
  }

  public boolean isAlive() {
    return this.alive;
  }

  public PlayerState setAlive(boolean alive) {
    this.alive = alive;
    setAliveIsSet(true);
    return this;
  }

  public void unsetAlive() {
    __isset_bit_vector.clear(__ALIVE_ISSET_ID);
  }

  /** Returns true if field alive is set (has been assigned a value) and false otherwise */
  public boolean isSetAlive() {
    return __isset_bit_vector.get(__ALIVE_ISSET_ID);
  }

  public void setAliveIsSet(boolean value) {
    __isset_bit_vector.set(__ALIVE_ISSET_ID, value);
  }

  public double getXCoordinate() {
    return this.xCoordinate;
  }

  public PlayerState setXCoordinate(double xCoordinate) {
    this.xCoordinate = xCoordinate;
    setXCoordinateIsSet(true);
    return this;
  }

  public void unsetXCoordinate() {
    __isset_bit_vector.clear(__XCOORDINATE_ISSET_ID);
  }

  /** Returns true if field xCoordinate is set (has been assigned a value) and false otherwise */
  public boolean isSetXCoordinate() {
    return __isset_bit_vector.get(__XCOORDINATE_ISSET_ID);
  }

  public void setXCoordinateIsSet(boolean value) {
    __isset_bit_vector.set(__XCOORDINATE_ISSET_ID, value);
  }

  public double getYCoordinate() {
    return this.yCoordinate;
  }

  public PlayerState setYCoordinate(double yCoordinate) {
    this.yCoordinate = yCoordinate;
    setYCoordinateIsSet(true);
    return this;
  }

  public void unsetYCoordinate() {
    __isset_bit_vector.clear(__YCOORDINATE_ISSET_ID);
  }

  /** Returns true if field yCoordinate is set (has been assigned a value) and false otherwise */
  public boolean isSetYCoordinate() {
    return __isset_bit_vector.get(__YCOORDINATE_ISSET_ID);
  }

  public void setYCoordinateIsSet(boolean value) {
    __isset_bit_vector.set(__YCOORDINATE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BOMB_SIZE:
      if (value == null) {
        unsetBomb_size();
      } else {
        setBomb_size((Integer)value);
      }
      break;

    case BOMB_AMOUNT:
      if (value == null) {
        unsetBomb_amount();
      } else {
        setBomb_amount((Integer)value);
      }
      break;

    case FOOT:
      if (value == null) {
        unsetFoot();
      } else {
        setFoot((Boolean)value);
      }
      break;

    case CHAIN:
      if (value == null) {
        unsetChain();
      } else {
        setChain((Boolean)value);
      }
      break;

    case DISEASE:
      if (value == null) {
        unsetDisease();
      } else {
        setDisease((Disease)value);
      }
      break;

    case ALIVE:
      if (value == null) {
        unsetAlive();
      } else {
        setAlive((Boolean)value);
      }
      break;

    case X_COORDINATE:
      if (value == null) {
        unsetXCoordinate();
      } else {
        setXCoordinate((Double)value);
      }
      break;

    case Y_COORDINATE:
      if (value == null) {
        unsetYCoordinate();
      } else {
        setYCoordinate((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BOMB_SIZE:
      return Integer.valueOf(getBomb_size());

    case BOMB_AMOUNT:
      return Integer.valueOf(getBomb_amount());

    case FOOT:
      return Boolean.valueOf(isFoot());

    case CHAIN:
      return Boolean.valueOf(isChain());

    case DISEASE:
      return getDisease();

    case ALIVE:
      return Boolean.valueOf(isAlive());

    case X_COORDINATE:
      return Double.valueOf(getXCoordinate());

    case Y_COORDINATE:
      return Double.valueOf(getYCoordinate());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BOMB_SIZE:
      return isSetBomb_size();
    case BOMB_AMOUNT:
      return isSetBomb_amount();
    case FOOT:
      return isSetFoot();
    case CHAIN:
      return isSetChain();
    case DISEASE:
      return isSetDisease();
    case ALIVE:
      return isSetAlive();
    case X_COORDINATE:
      return isSetXCoordinate();
    case Y_COORDINATE:
      return isSetYCoordinate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PlayerState)
      return this.equals((PlayerState)that);
    return false;
  }

  public boolean equals(PlayerState that) {
    if (that == null)
      return false;

    boolean this_present_bomb_size = true;
    boolean that_present_bomb_size = true;
    if (this_present_bomb_size || that_present_bomb_size) {
      if (!(this_present_bomb_size && that_present_bomb_size))
        return false;
      if (this.bomb_size != that.bomb_size)
        return false;
    }

    boolean this_present_bomb_amount = true;
    boolean that_present_bomb_amount = true;
    if (this_present_bomb_amount || that_present_bomb_amount) {
      if (!(this_present_bomb_amount && that_present_bomb_amount))
        return false;
      if (this.bomb_amount != that.bomb_amount)
        return false;
    }

    boolean this_present_foot = true;
    boolean that_present_foot = true;
    if (this_present_foot || that_present_foot) {
      if (!(this_present_foot && that_present_foot))
        return false;
      if (this.foot != that.foot)
        return false;
    }

    boolean this_present_chain = true;
    boolean that_present_chain = true;
    if (this_present_chain || that_present_chain) {
      if (!(this_present_chain && that_present_chain))
        return false;
      if (this.chain != that.chain)
        return false;
    }

    boolean this_present_disease = true && this.isSetDisease();
    boolean that_present_disease = true && that.isSetDisease();
    if (this_present_disease || that_present_disease) {
      if (!(this_present_disease && that_present_disease))
        return false;
      if (!this.disease.equals(that.disease))
        return false;
    }

    boolean this_present_alive = true;
    boolean that_present_alive = true;
    if (this_present_alive || that_present_alive) {
      if (!(this_present_alive && that_present_alive))
        return false;
      if (this.alive != that.alive)
        return false;
    }

    boolean this_present_xCoordinate = true;
    boolean that_present_xCoordinate = true;
    if (this_present_xCoordinate || that_present_xCoordinate) {
      if (!(this_present_xCoordinate && that_present_xCoordinate))
        return false;
      if (this.xCoordinate != that.xCoordinate)
        return false;
    }

    boolean this_present_yCoordinate = true;
    boolean that_present_yCoordinate = true;
    if (this_present_yCoordinate || that_present_yCoordinate) {
      if (!(this_present_yCoordinate && that_present_yCoordinate))
        return false;
      if (this.yCoordinate != that.yCoordinate)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(PlayerState other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    PlayerState typedOther = (PlayerState)other;

    lastComparison = Boolean.valueOf(isSetBomb_size()).compareTo(typedOther.isSetBomb_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBomb_size()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bomb_size, typedOther.bomb_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBomb_amount()).compareTo(typedOther.isSetBomb_amount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBomb_amount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bomb_amount, typedOther.bomb_amount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFoot()).compareTo(typedOther.isSetFoot());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFoot()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foot, typedOther.foot);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChain()).compareTo(typedOther.isSetChain());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChain()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chain, typedOther.chain);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisease()).compareTo(typedOther.isSetDisease());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisease()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disease, typedOther.disease);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlive()).compareTo(typedOther.isSetAlive());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlive()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alive, typedOther.alive);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetXCoordinate()).compareTo(typedOther.isSetXCoordinate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetXCoordinate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xCoordinate, typedOther.xCoordinate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetYCoordinate()).compareTo(typedOther.isSetYCoordinate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYCoordinate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.yCoordinate, typedOther.yCoordinate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PlayerState(");
    boolean first = true;

    sb.append("bomb_size:");
    sb.append(this.bomb_size);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bomb_amount:");
    sb.append(this.bomb_amount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("foot:");
    sb.append(this.foot);
    first = false;
    if (!first) sb.append(", ");
    sb.append("chain:");
    sb.append(this.chain);
    first = false;
    if (!first) sb.append(", ");
    sb.append("disease:");
    if (this.disease == null) {
      sb.append("null");
    } else {
      sb.append(this.disease);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("alive:");
    sb.append(this.alive);
    first = false;
    if (!first) sb.append(", ");
    sb.append("xCoordinate:");
    sb.append(this.xCoordinate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("yCoordinate:");
    sb.append(this.yCoordinate);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PlayerStateStandardSchemeFactory implements SchemeFactory {
    public PlayerStateStandardScheme getScheme() {
      return new PlayerStateStandardScheme();
    }
  }

  private static class PlayerStateStandardScheme extends StandardScheme<PlayerState> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PlayerState struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BOMB_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bomb_size = iprot.readI32();
              struct.setBomb_sizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BOMB_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bomb_amount = iprot.readI32();
              struct.setBomb_amountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FOOT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.foot = iprot.readBool();
              struct.setFootIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CHAIN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.chain = iprot.readBool();
              struct.setChainIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DISEASE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.disease = Disease.findByValue(iprot.readI32());
              struct.setDiseaseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ALIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.alive = iprot.readBool();
              struct.setAliveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // X_COORDINATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.xCoordinate = iprot.readDouble();
              struct.setXCoordinateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // Y_COORDINATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.yCoordinate = iprot.readDouble();
              struct.setYCoordinateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PlayerState struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(BOMB_SIZE_FIELD_DESC);
      oprot.writeI32(struct.bomb_size);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BOMB_AMOUNT_FIELD_DESC);
      oprot.writeI32(struct.bomb_amount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FOOT_FIELD_DESC);
      oprot.writeBool(struct.foot);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CHAIN_FIELD_DESC);
      oprot.writeBool(struct.chain);
      oprot.writeFieldEnd();
      if (struct.disease != null) {
        oprot.writeFieldBegin(DISEASE_FIELD_DESC);
        oprot.writeI32(struct.disease.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ALIVE_FIELD_DESC);
      oprot.writeBool(struct.alive);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(X_COORDINATE_FIELD_DESC);
      oprot.writeDouble(struct.xCoordinate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(Y_COORDINATE_FIELD_DESC);
      oprot.writeDouble(struct.yCoordinate);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PlayerStateTupleSchemeFactory implements SchemeFactory {
    public PlayerStateTupleScheme getScheme() {
      return new PlayerStateTupleScheme();
    }
  }

  private static class PlayerStateTupleScheme extends TupleScheme<PlayerState> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PlayerState struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBomb_size()) {
        optionals.set(0);
      }
      if (struct.isSetBomb_amount()) {
        optionals.set(1);
      }
      if (struct.isSetFoot()) {
        optionals.set(2);
      }
      if (struct.isSetChain()) {
        optionals.set(3);
      }
      if (struct.isSetDisease()) {
        optionals.set(4);
      }
      if (struct.isSetAlive()) {
        optionals.set(5);
      }
      if (struct.isSetXCoordinate()) {
        optionals.set(6);
      }
      if (struct.isSetYCoordinate()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetBomb_size()) {
        oprot.writeI32(struct.bomb_size);
      }
      if (struct.isSetBomb_amount()) {
        oprot.writeI32(struct.bomb_amount);
      }
      if (struct.isSetFoot()) {
        oprot.writeBool(struct.foot);
      }
      if (struct.isSetChain()) {
        oprot.writeBool(struct.chain);
      }
      if (struct.isSetDisease()) {
        oprot.writeI32(struct.disease.getValue());
      }
      if (struct.isSetAlive()) {
        oprot.writeBool(struct.alive);
      }
      if (struct.isSetXCoordinate()) {
        oprot.writeDouble(struct.xCoordinate);
      }
      if (struct.isSetYCoordinate()) {
        oprot.writeDouble(struct.yCoordinate);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PlayerState struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.bomb_size = iprot.readI32();
        struct.setBomb_sizeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.bomb_amount = iprot.readI32();
        struct.setBomb_amountIsSet(true);
      }
      if (incoming.get(2)) {
        struct.foot = iprot.readBool();
        struct.setFootIsSet(true);
      }
      if (incoming.get(3)) {
        struct.chain = iprot.readBool();
        struct.setChainIsSet(true);
      }
      if (incoming.get(4)) {
        struct.disease = Disease.findByValue(iprot.readI32());
        struct.setDiseaseIsSet(true);
      }
      if (incoming.get(5)) {
        struct.alive = iprot.readBool();
        struct.setAliveIsSet(true);
      }
      if (incoming.get(6)) {
        struct.xCoordinate = iprot.readDouble();
        struct.setXCoordinateIsSet(true);
      }
      if (incoming.get(7)) {
        struct.yCoordinate = iprot.readDouble();
        struct.setYCoordinateIsSet(true);
      }
    }
  }

}


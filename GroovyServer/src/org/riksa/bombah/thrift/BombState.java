/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.riksa.bombah.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class BombState implements org.apache.thrift.TBase<BombState, BombState._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BombState");

  private static final org.apache.thrift.protocol.TField BLAST_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("blastSize", org.apache.thrift.protocol.TType.BYTE, (short)1);
  private static final org.apache.thrift.protocol.TField X_COORDINATE_FIELD_DESC = new org.apache.thrift.protocol.TField("xCoordinate", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField Y_COORDINATE_FIELD_DESC = new org.apache.thrift.protocol.TField("yCoordinate", org.apache.thrift.protocol.TType.BYTE, (short)3);
  private static final org.apache.thrift.protocol.TField TICKS_REMAINING_FIELD_DESC = new org.apache.thrift.protocol.TField("ticksRemaining", org.apache.thrift.protocol.TType.BYTE, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BombStateStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BombStateTupleSchemeFactory());
  }

  public byte blastSize; // required
  public byte xCoordinate; // required
  public byte yCoordinate; // required
  public byte ticksRemaining; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BLAST_SIZE((short)1, "blastSize"),
    X_COORDINATE((short)2, "xCoordinate"),
    Y_COORDINATE((short)3, "yCoordinate"),
    TICKS_REMAINING((short)4, "ticksRemaining");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BLAST_SIZE
          return BLAST_SIZE;
        case 2: // X_COORDINATE
          return X_COORDINATE;
        case 3: // Y_COORDINATE
          return Y_COORDINATE;
        case 4: // TICKS_REMAINING
          return TICKS_REMAINING;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BLASTSIZE_ISSET_ID = 0;
  private static final int __XCOORDINATE_ISSET_ID = 1;
  private static final int __YCOORDINATE_ISSET_ID = 2;
  private static final int __TICKSREMAINING_ISSET_ID = 3;
  private BitSet __isset_bit_vector = new BitSet(4);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BLAST_SIZE, new org.apache.thrift.meta_data.FieldMetaData("blastSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.X_COORDINATE, new org.apache.thrift.meta_data.FieldMetaData("xCoordinate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.Y_COORDINATE, new org.apache.thrift.meta_data.FieldMetaData("yCoordinate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.TICKS_REMAINING, new org.apache.thrift.meta_data.FieldMetaData("ticksRemaining", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BombState.class, metaDataMap);
  }

  public BombState() {
  }

  public BombState(
    byte blastSize,
    byte xCoordinate,
    byte yCoordinate,
    byte ticksRemaining)
  {
    this();
    this.blastSize = blastSize;
    setBlastSizeIsSet(true);
    this.xCoordinate = xCoordinate;
    setXCoordinateIsSet(true);
    this.yCoordinate = yCoordinate;
    setYCoordinateIsSet(true);
    this.ticksRemaining = ticksRemaining;
    setTicksRemainingIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BombState(BombState other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.blastSize = other.blastSize;
    this.xCoordinate = other.xCoordinate;
    this.yCoordinate = other.yCoordinate;
    this.ticksRemaining = other.ticksRemaining;
  }

  public BombState deepCopy() {
    return new BombState(this);
  }

  @Override
  public void clear() {
    setBlastSizeIsSet(false);
    this.blastSize = 0;
    setXCoordinateIsSet(false);
    this.xCoordinate = 0;
    setYCoordinateIsSet(false);
    this.yCoordinate = 0;
    setTicksRemainingIsSet(false);
    this.ticksRemaining = 0;
  }

  public byte getBlastSize() {
    return this.blastSize;
  }

  public BombState setBlastSize(byte blastSize) {
    this.blastSize = blastSize;
    setBlastSizeIsSet(true);
    return this;
  }

  public void unsetBlastSize() {
    __isset_bit_vector.clear(__BLASTSIZE_ISSET_ID);
  }

  /** Returns true if field blastSize is set (has been assigned a value) and false otherwise */
  public boolean isSetBlastSize() {
    return __isset_bit_vector.get(__BLASTSIZE_ISSET_ID);
  }

  public void setBlastSizeIsSet(boolean value) {
    __isset_bit_vector.set(__BLASTSIZE_ISSET_ID, value);
  }

  public byte getXCoordinate() {
    return this.xCoordinate;
  }

  public BombState setXCoordinate(byte xCoordinate) {
    this.xCoordinate = xCoordinate;
    setXCoordinateIsSet(true);
    return this;
  }

  public void unsetXCoordinate() {
    __isset_bit_vector.clear(__XCOORDINATE_ISSET_ID);
  }

  /** Returns true if field xCoordinate is set (has been assigned a value) and false otherwise */
  public boolean isSetXCoordinate() {
    return __isset_bit_vector.get(__XCOORDINATE_ISSET_ID);
  }

  public void setXCoordinateIsSet(boolean value) {
    __isset_bit_vector.set(__XCOORDINATE_ISSET_ID, value);
  }

  public byte getYCoordinate() {
    return this.yCoordinate;
  }

  public BombState setYCoordinate(byte yCoordinate) {
    this.yCoordinate = yCoordinate;
    setYCoordinateIsSet(true);
    return this;
  }

  public void unsetYCoordinate() {
    __isset_bit_vector.clear(__YCOORDINATE_ISSET_ID);
  }

  /** Returns true if field yCoordinate is set (has been assigned a value) and false otherwise */
  public boolean isSetYCoordinate() {
    return __isset_bit_vector.get(__YCOORDINATE_ISSET_ID);
  }

  public void setYCoordinateIsSet(boolean value) {
    __isset_bit_vector.set(__YCOORDINATE_ISSET_ID, value);
  }

  public byte getTicksRemaining() {
    return this.ticksRemaining;
  }

  public BombState setTicksRemaining(byte ticksRemaining) {
    this.ticksRemaining = ticksRemaining;
    setTicksRemainingIsSet(true);
    return this;
  }

  public void unsetTicksRemaining() {
    __isset_bit_vector.clear(__TICKSREMAINING_ISSET_ID);
  }

  /** Returns true if field ticksRemaining is set (has been assigned a value) and false otherwise */
  public boolean isSetTicksRemaining() {
    return __isset_bit_vector.get(__TICKSREMAINING_ISSET_ID);
  }

  public void setTicksRemainingIsSet(boolean value) {
    __isset_bit_vector.set(__TICKSREMAINING_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BLAST_SIZE:
      if (value == null) {
        unsetBlastSize();
      } else {
        setBlastSize((Byte)value);
      }
      break;

    case X_COORDINATE:
      if (value == null) {
        unsetXCoordinate();
      } else {
        setXCoordinate((Byte)value);
      }
      break;

    case Y_COORDINATE:
      if (value == null) {
        unsetYCoordinate();
      } else {
        setYCoordinate((Byte)value);
      }
      break;

    case TICKS_REMAINING:
      if (value == null) {
        unsetTicksRemaining();
      } else {
        setTicksRemaining((Byte)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BLAST_SIZE:
      return Byte.valueOf(getBlastSize());

    case X_COORDINATE:
      return Byte.valueOf(getXCoordinate());

    case Y_COORDINATE:
      return Byte.valueOf(getYCoordinate());

    case TICKS_REMAINING:
      return Byte.valueOf(getTicksRemaining());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BLAST_SIZE:
      return isSetBlastSize();
    case X_COORDINATE:
      return isSetXCoordinate();
    case Y_COORDINATE:
      return isSetYCoordinate();
    case TICKS_REMAINING:
      return isSetTicksRemaining();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BombState)
      return this.equals((BombState)that);
    return false;
  }

  public boolean equals(BombState that) {
    if (that == null)
      return false;

    boolean this_present_blastSize = true;
    boolean that_present_blastSize = true;
    if (this_present_blastSize || that_present_blastSize) {
      if (!(this_present_blastSize && that_present_blastSize))
        return false;
      if (this.blastSize != that.blastSize)
        return false;
    }

    boolean this_present_xCoordinate = true;
    boolean that_present_xCoordinate = true;
    if (this_present_xCoordinate || that_present_xCoordinate) {
      if (!(this_present_xCoordinate && that_present_xCoordinate))
        return false;
      if (this.xCoordinate != that.xCoordinate)
        return false;
    }

    boolean this_present_yCoordinate = true;
    boolean that_present_yCoordinate = true;
    if (this_present_yCoordinate || that_present_yCoordinate) {
      if (!(this_present_yCoordinate && that_present_yCoordinate))
        return false;
      if (this.yCoordinate != that.yCoordinate)
        return false;
    }

    boolean this_present_ticksRemaining = true;
    boolean that_present_ticksRemaining = true;
    if (this_present_ticksRemaining || that_present_ticksRemaining) {
      if (!(this_present_ticksRemaining && that_present_ticksRemaining))
        return false;
      if (this.ticksRemaining != that.ticksRemaining)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(BombState other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    BombState typedOther = (BombState)other;

    lastComparison = Boolean.valueOf(isSetBlastSize()).compareTo(typedOther.isSetBlastSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlastSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blastSize, typedOther.blastSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetXCoordinate()).compareTo(typedOther.isSetXCoordinate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetXCoordinate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xCoordinate, typedOther.xCoordinate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetYCoordinate()).compareTo(typedOther.isSetYCoordinate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYCoordinate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.yCoordinate, typedOther.yCoordinate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTicksRemaining()).compareTo(typedOther.isSetTicksRemaining());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicksRemaining()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticksRemaining, typedOther.ticksRemaining);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BombState(");
    boolean first = true;

    sb.append("blastSize:");
    sb.append(this.blastSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("xCoordinate:");
    sb.append(this.xCoordinate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("yCoordinate:");
    sb.append(this.yCoordinate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ticksRemaining:");
    sb.append(this.ticksRemaining);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BombStateStandardSchemeFactory implements SchemeFactory {
    public BombStateStandardScheme getScheme() {
      return new BombStateStandardScheme();
    }
  }

  private static class BombStateStandardScheme extends StandardScheme<BombState> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BombState struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BLAST_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.blastSize = iprot.readByte();
              struct.setBlastSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // X_COORDINATE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.xCoordinate = iprot.readByte();
              struct.setXCoordinateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // Y_COORDINATE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.yCoordinate = iprot.readByte();
              struct.setYCoordinateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TICKS_REMAINING
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.ticksRemaining = iprot.readByte();
              struct.setTicksRemainingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BombState struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(BLAST_SIZE_FIELD_DESC);
      oprot.writeByte(struct.blastSize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(X_COORDINATE_FIELD_DESC);
      oprot.writeByte(struct.xCoordinate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(Y_COORDINATE_FIELD_DESC);
      oprot.writeByte(struct.yCoordinate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TICKS_REMAINING_FIELD_DESC);
      oprot.writeByte(struct.ticksRemaining);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BombStateTupleSchemeFactory implements SchemeFactory {
    public BombStateTupleScheme getScheme() {
      return new BombStateTupleScheme();
    }
  }

  private static class BombStateTupleScheme extends TupleScheme<BombState> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BombState struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBlastSize()) {
        optionals.set(0);
      }
      if (struct.isSetXCoordinate()) {
        optionals.set(1);
      }
      if (struct.isSetYCoordinate()) {
        optionals.set(2);
      }
      if (struct.isSetTicksRemaining()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetBlastSize()) {
        oprot.writeByte(struct.blastSize);
      }
      if (struct.isSetXCoordinate()) {
        oprot.writeByte(struct.xCoordinate);
      }
      if (struct.isSetYCoordinate()) {
        oprot.writeByte(struct.yCoordinate);
      }
      if (struct.isSetTicksRemaining()) {
        oprot.writeByte(struct.ticksRemaining);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BombState struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.blastSize = iprot.readByte();
        struct.setBlastSizeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.xCoordinate = iprot.readByte();
        struct.setXCoordinateIsSet(true);
      }
      if (incoming.get(2)) {
        struct.yCoordinate = iprot.readByte();
        struct.setYCoordinateIsSet(true);
      }
      if (incoming.get(3)) {
        struct.ticksRemaining = iprot.readByte();
        struct.setTicksRemainingIsSet(true);
      }
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift;

import thrift.async.*;
import thrift.meta_data.FieldMetaData;
import thrift.meta_data.StructMetaData;
import thrift.protocol.*;
import thrift.scheme.IScheme;
import thrift.scheme.SchemeFactory;
import thrift.scheme.StandardScheme;

import thrift.scheme.TupleScheme;

import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import thrift.meta_data.FieldValueMetaData;
import thrift.transport.TIOStreamTransport;
import thrift.transport.TMemoryInputTransport;
import thrift.transport.TNonblockingTransport;

public class BombahService {

  public interface Iface {

    public String ping() throws TException;

    /**
     * Event from controller
     * 
     * @param controllerState
     */
    public ControllerResult controllerEvent(ControllerState controllerState) throws YouAreDeadException, GameOverException, TException;

    public MoveActionResult move(MoveAction moveAction) throws YouAreDeadException, GameOverException, TException;

    public BombActionResult bomb(BombAction bombAction) throws YouAreDeadException, GameOverException, TException;

    public MapState waitTicks(int ticks) throws YouAreDeadException, GameOverException, TException;

    public GameInfo joinGame() throws TimeoutException, TException;

    /**
     * returns the index of your bomberman
     */
    public byte waitForStart() throws TimeoutException, TException;

    public MapState getMapState() throws TException;

  }

  public interface AsyncIface {

    public void ping(AsyncMethodCallback<AsyncClient.ping_call> resultHandler) throws TException;

    public void controllerEvent(ControllerState controllerState, AsyncMethodCallback<AsyncClient.controllerEvent_call> resultHandler) throws TException;

    public void move(MoveAction moveAction, AsyncMethodCallback<AsyncClient.move_call> resultHandler) throws TException;

    public void bomb(BombAction bombAction, AsyncMethodCallback<AsyncClient.bomb_call> resultHandler) throws TException;

    public void waitTicks(int ticks, AsyncMethodCallback<AsyncClient.waitTicks_call> resultHandler) throws TException;

    public void joinGame(AsyncMethodCallback<AsyncClient.joinGame_call> resultHandler) throws TException;

    public void waitForStart(AsyncMethodCallback<AsyncClient.waitForStart_call> resultHandler) throws TException;

    public void getMapState(AsyncMethodCallback<AsyncClient.getMapState_call> resultHandler) throws TException;

  }

  public static class Client extends TServiceClient implements Iface {
    public static class Factory implements TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(TProtocol iprot, TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(TProtocol iprot, TProtocol oprot) {
      super(iprot, oprot);
    }

    public String ping() throws TException
    {
      send_ping();
      return recv_ping();
    }

    public void send_ping() throws TException
    {
      ping_args args = new ping_args();
      sendBase("ping", args);
    }

    public String recv_ping() throws TException
    {
      ping_result result = new ping_result();
      receiveBase(result, "ping");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "ping failed: unknown result");
    }

    public ControllerResult controllerEvent(ControllerState controllerState) throws YouAreDeadException, GameOverException, TException
    {
      send_controllerEvent(controllerState);
      return recv_controllerEvent();
    }

    public void send_controllerEvent(ControllerState controllerState) throws TException
    {
      controllerEvent_args args = new controllerEvent_args();
      args.setControllerState(controllerState);
      sendBase("controllerEvent", args);
    }

    public ControllerResult recv_controllerEvent() throws YouAreDeadException, GameOverException, TException
    {
      controllerEvent_result result = new controllerEvent_result();
      receiveBase(result, "controllerEvent");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.youAreDead != null) {
        throw result.youAreDead;
      }
      if (result.gameOver != null) {
        throw result.gameOver;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "controllerEvent failed: unknown result");
    }

    public MoveActionResult move(MoveAction moveAction) throws YouAreDeadException, GameOverException, TException
    {
      send_move(moveAction);
      return recv_move();
    }

    public void send_move(MoveAction moveAction) throws TException
    {
      move_args args = new move_args();
      args.setMoveAction(moveAction);
      sendBase("move", args);
    }

    public MoveActionResult recv_move() throws YouAreDeadException, GameOverException, TException
    {
      move_result result = new move_result();
      receiveBase(result, "move");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.youAreDead != null) {
        throw result.youAreDead;
      }
      if (result.gameOver != null) {
        throw result.gameOver;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "move failed: unknown result");
    }

    public BombActionResult bomb(BombAction bombAction) throws YouAreDeadException, GameOverException, TException
    {
      send_bomb(bombAction);
      return recv_bomb();
    }

    public void send_bomb(BombAction bombAction) throws TException
    {
      bomb_args args = new bomb_args();
      args.setBombAction(bombAction);
      sendBase("bomb", args);
    }

    public BombActionResult recv_bomb() throws YouAreDeadException, GameOverException, TException
    {
      bomb_result result = new bomb_result();
      receiveBase(result, "bomb");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.youAreDead != null) {
        throw result.youAreDead;
      }
      if (result.gameOver != null) {
        throw result.gameOver;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "bomb failed: unknown result");
    }

    public MapState waitTicks(int ticks) throws YouAreDeadException, GameOverException, TException
    {
      send_waitTicks(ticks);
      return recv_waitTicks();
    }

    public void send_waitTicks(int ticks) throws TException
    {
      waitTicks_args args = new waitTicks_args();
      args.setTicks(ticks);
      sendBase("waitTicks", args);
    }

    public MapState recv_waitTicks() throws YouAreDeadException, GameOverException, TException
    {
      waitTicks_result result = new waitTicks_result();
      receiveBase(result, "waitTicks");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.youAreDead != null) {
        throw result.youAreDead;
      }
      if (result.gameOver != null) {
        throw result.gameOver;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "waitTicks failed: unknown result");
    }

    public GameInfo joinGame() throws TimeoutException, TException
    {
      send_joinGame();
      return recv_joinGame();
    }

    public void send_joinGame() throws TException
    {
      joinGame_args args = new joinGame_args();
      sendBase("joinGame", args);
    }

    public GameInfo recv_joinGame() throws TimeoutException, TException
    {
      joinGame_result result = new joinGame_result();
      receiveBase(result, "joinGame");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.timeOutException != null) {
        throw result.timeOutException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "joinGame failed: unknown result");
    }

    public byte waitForStart() throws TimeoutException, TException
    {
      send_waitForStart();
      return recv_waitForStart();
    }

    public void send_waitForStart() throws TException
    {
      waitForStart_args args = new waitForStart_args();
      sendBase("waitForStart", args);
    }

    public byte recv_waitForStart() throws TimeoutException, TException
    {
      waitForStart_result result = new waitForStart_result();
      receiveBase(result, "waitForStart");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.timeOutException != null) {
        throw result.timeOutException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "waitForStart failed: unknown result");
    }

    public MapState getMapState() throws TException
    {
      send_getMapState();
      return recv_getMapState();
    }

    public void send_getMapState() throws TException
    {
      getMapState_args args = new getMapState_args();
      sendBase("getMapState", args);
    }

    public MapState recv_getMapState() throws TException
    {
      getMapState_result result = new getMapState_result();
      receiveBase(result, "getMapState");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getMapState failed: unknown result");
    }

  }
  public static class AsyncClient extends TAsyncClient implements AsyncIface {
    public static class Factory implements TAsyncClientFactory<AsyncClient> {
      private TAsyncClientManager clientManager;
      private TProtocolFactory protocolFactory;
      public Factory(TAsyncClientManager clientManager, TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(TProtocolFactory protocolFactory, TAsyncClientManager clientManager, TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void ping(AsyncMethodCallback<ping_call> resultHandler) throws TException {
      checkReady();
      ping_call method_call = new ping_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ping_call extends TAsyncMethodCall {
      public ping_call(AsyncMethodCallback<ping_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("ping", TMessageType.CALL, 0));
        ping_args args = new ping_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws TException {
        if (getState() != TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ping();
      }
    }

    public void controllerEvent(ControllerState controllerState, AsyncMethodCallback<controllerEvent_call> resultHandler) throws TException {
      checkReady();
      controllerEvent_call method_call = new controllerEvent_call(controllerState, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class controllerEvent_call extends TAsyncMethodCall {
      private ControllerState controllerState;
      public controllerEvent_call(ControllerState controllerState, AsyncMethodCallback<controllerEvent_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.controllerState = controllerState;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("controllerEvent", TMessageType.CALL, 0));
        controllerEvent_args args = new controllerEvent_args();
        args.setControllerState(controllerState);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ControllerResult getResult() throws YouAreDeadException, GameOverException, TException {
        if (getState() != TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_controllerEvent();
      }
    }

    public void move(MoveAction moveAction, AsyncMethodCallback<move_call> resultHandler) throws TException {
      checkReady();
      move_call method_call = new move_call(moveAction, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class move_call extends TAsyncMethodCall {
      private MoveAction moveAction;
      public move_call(MoveAction moveAction, AsyncMethodCallback<move_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.moveAction = moveAction;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("move", TMessageType.CALL, 0));
        move_args args = new move_args();
        args.setMoveAction(moveAction);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MoveActionResult getResult() throws YouAreDeadException, GameOverException, TException {
        if (getState() != TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_move();
      }
    }

    public void bomb(BombAction bombAction, AsyncMethodCallback<bomb_call> resultHandler) throws TException {
      checkReady();
      bomb_call method_call = new bomb_call(bombAction, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bomb_call extends TAsyncMethodCall {
      private BombAction bombAction;
      public bomb_call(BombAction bombAction, AsyncMethodCallback<bomb_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bombAction = bombAction;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("bomb", TMessageType.CALL, 0));
        bomb_args args = new bomb_args();
        args.setBombAction(bombAction);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public BombActionResult getResult() throws YouAreDeadException, GameOverException, TException {
        if (getState() != TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_bomb();
      }
    }

    public void waitTicks(int ticks, AsyncMethodCallback<waitTicks_call> resultHandler) throws TException {
      checkReady();
      waitTicks_call method_call = new waitTicks_call(ticks, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class waitTicks_call extends TAsyncMethodCall {
      private int ticks;
      public waitTicks_call(int ticks, AsyncMethodCallback<waitTicks_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ticks = ticks;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("waitTicks", TMessageType.CALL, 0));
        waitTicks_args args = new waitTicks_args();
        args.setTicks(ticks);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MapState getResult() throws YouAreDeadException, GameOverException, TException {
        if (getState() != TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_waitTicks();
      }
    }

    public void joinGame(AsyncMethodCallback<joinGame_call> resultHandler) throws TException {
      checkReady();
      joinGame_call method_call = new joinGame_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class joinGame_call extends TAsyncMethodCall {
      public joinGame_call(AsyncMethodCallback<joinGame_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("joinGame", TMessageType.CALL, 0));
        joinGame_args args = new joinGame_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public GameInfo getResult() throws TimeoutException, TException {
        if (getState() != TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_joinGame();
      }
    }

    public void waitForStart(AsyncMethodCallback<waitForStart_call> resultHandler) throws TException {
      checkReady();
      waitForStart_call method_call = new waitForStart_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class waitForStart_call extends TAsyncMethodCall {
      public waitForStart_call(AsyncMethodCallback<waitForStart_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("waitForStart", TMessageType.CALL, 0));
        waitForStart_args args = new waitForStart_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public byte getResult() throws TimeoutException, TException {
        if (getState() != TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_waitForStart();
      }
    }

    public void getMapState(AsyncMethodCallback<getMapState_call> resultHandler) throws TException {
      checkReady();
      getMapState_call method_call = new getMapState_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMapState_call extends TAsyncMethodCall {
      public getMapState_call(AsyncMethodCallback<getMapState_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("getMapState", TMessageType.CALL, 0));
        getMapState_args args = new getMapState_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MapState getResult() throws TException {
        if (getState() != TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMapState();
      }
    }

  }

  public static class Processor<I extends Iface> extends TBaseProcessor<I> implements TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, ProcessFunction<I, ? extends TBase>>()));
    }

    protected Processor(I iface, Map<String, ProcessFunction<I, ? extends  TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String, ProcessFunction<I, ? extends  TBase>> getProcessMap(Map<String, ProcessFunction<I, ? extends  TBase>> processMap) {
      processMap.put("ping", new ping());
      processMap.put("controllerEvent", new controllerEvent());
      processMap.put("move", new move());
      processMap.put("bomb", new bomb());
      processMap.put("waitTicks", new waitTicks());
      processMap.put("joinGame", new joinGame());
      processMap.put("waitForStart", new waitForStart());
      processMap.put("getMapState", new getMapState());
      return processMap;
    }

    private static class ping<I extends Iface> extends ProcessFunction<I, ping_args> {
      public ping() {
        super("ping");
      }

      protected ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      protected ping_result getResult(I iface, ping_args args) throws TException {
        ping_result result = new ping_result();
        result.success = iface.ping();
        return result;
      }
    }

    private static class controllerEvent<I extends Iface> extends ProcessFunction<I, controllerEvent_args> {
      public controllerEvent() {
        super("controllerEvent");
      }

      protected controllerEvent_args getEmptyArgsInstance() {
        return new controllerEvent_args();
      }

      protected controllerEvent_result getResult(I iface, controllerEvent_args args) throws TException {
        controllerEvent_result result = new controllerEvent_result();
        try {
          result.success = iface.controllerEvent(args.controllerState);
        } catch (YouAreDeadException youAreDead) {
          result.youAreDead = youAreDead;
        } catch (GameOverException gameOver) {
          result.gameOver = gameOver;
        }
        return result;
      }
    }

    private static class move<I extends Iface> extends ProcessFunction<I, move_args> {
      public move() {
        super("move");
      }

      protected move_args getEmptyArgsInstance() {
        return new move_args();
      }

      protected move_result getResult(I iface, move_args args) throws TException {
        move_result result = new move_result();
        try {
          result.success = iface.move(args.moveAction);
        } catch (YouAreDeadException youAreDead) {
          result.youAreDead = youAreDead;
        } catch (GameOverException gameOver) {
          result.gameOver = gameOver;
        }
        return result;
      }
    }

    private static class bomb<I extends Iface> extends ProcessFunction<I, bomb_args> {
      public bomb() {
        super("bomb");
      }

      protected bomb_args getEmptyArgsInstance() {
        return new bomb_args();
      }

      protected bomb_result getResult(I iface, bomb_args args) throws TException {
        bomb_result result = new bomb_result();
        try {
          result.success = iface.bomb(args.bombAction);
        } catch (YouAreDeadException youAreDead) {
          result.youAreDead = youAreDead;
        } catch (GameOverException gameOver) {
          result.gameOver = gameOver;
        }
        return result;
      }
    }

    private static class waitTicks<I extends Iface> extends ProcessFunction<I, waitTicks_args> {
      public waitTicks() {
        super("waitTicks");
      }

      protected waitTicks_args getEmptyArgsInstance() {
        return new waitTicks_args();
      }

      protected waitTicks_result getResult(I iface, waitTicks_args args) throws TException {
        waitTicks_result result = new waitTicks_result();
        try {
          result.success = iface.waitTicks(args.ticks);
        } catch (YouAreDeadException youAreDead) {
          result.youAreDead = youAreDead;
        } catch (GameOverException gameOver) {
          result.gameOver = gameOver;
        }
        return result;
      }
    }

    private static class joinGame<I extends Iface> extends ProcessFunction<I, joinGame_args> {
      public joinGame() {
        super("joinGame");
      }

      protected joinGame_args getEmptyArgsInstance() {
        return new joinGame_args();
      }

      protected joinGame_result getResult(I iface, joinGame_args args) throws TException {
        joinGame_result result = new joinGame_result();
        try {
          result.success = iface.joinGame();
        } catch (TimeoutException timeOutException) {
          result.timeOutException = timeOutException;
        }
        return result;
      }
    }

    private static class waitForStart<I extends Iface> extends ProcessFunction<I, waitForStart_args> {
      public waitForStart() {
        super("waitForStart");
      }

      protected waitForStart_args getEmptyArgsInstance() {
        return new waitForStart_args();
      }

      protected waitForStart_result getResult(I iface, waitForStart_args args) throws TException {
        waitForStart_result result = new waitForStart_result();
        try {
          result.success = iface.waitForStart();
          result.setSuccessIsSet(true);
        } catch (TimeoutException timeOutException) {
          result.timeOutException = timeOutException;
        }
        return result;
      }
    }

    private static class getMapState<I extends Iface> extends ProcessFunction<I, getMapState_args> {
      public getMapState() {
        super("getMapState");
      }

      protected getMapState_args getEmptyArgsInstance() {
        return new getMapState_args();
      }

      protected getMapState_result getResult(I iface, getMapState_args args) throws TException {
        getMapState_result result = new getMapState_result();
        result.success = iface.getMapState();
        return result;
      }
    }

  }

  public static class ping_args implements TBase<ping_args, ping_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("ping_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ping_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ping_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(ping_args.class, metaDataMap);
    }

    public ping_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_args(ping_args other) {
    }

    public ping_args deepCopy() {
      return new ping_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_args)
        return this.equals((ping_args)that);
      return false;
    }

    public boolean equals(ping_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(ping_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      ping_args typedOther = (ping_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new TCompactProtocol(new TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new TCompactProtocol(new TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_argsStandardSchemeFactory implements SchemeFactory {
      public ping_argsStandardScheme getScheme() {
        return new ping_argsStandardScheme();
      }
    }

    private static class ping_argsStandardScheme extends StandardScheme<ping_args> {

      public void read(TProtocol iprot, ping_args struct) throws TException {
        TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            default:
              TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(TProtocol oprot, ping_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_argsTupleSchemeFactory implements SchemeFactory {
      public ping_argsTupleScheme getScheme() {
        return new ping_argsTupleScheme();
      }
    }

    private static class ping_argsTupleScheme extends TupleScheme<ping_args> {

      @Override
      public void write(TProtocol prot, ping_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(TProtocol prot, ping_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class ping_result implements TBase<ping_result, ping_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("ping_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ping_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ping_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT,
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(ping_result.class, metaDataMap);
    }

    public ping_result() {
    }

    public ping_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_result(ping_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public ping_result deepCopy() {
      return new ping_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public ping_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_result)
        return this.equals((ping_result)that);
      return false;
    }

    public boolean equals(ping_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(ping_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      ping_result typedOther = (ping_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new TCompactProtocol(new TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new TCompactProtocol(new TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_resultStandardSchemeFactory implements SchemeFactory {
      public ping_resultStandardScheme getScheme() {
        return new ping_resultStandardScheme();
      }
    }

    private static class ping_resultStandardScheme extends StandardScheme<ping_result> {

      public void read(TProtocol iprot, ping_result struct) throws TException {
        TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(TProtocol oprot, ping_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_resultTupleSchemeFactory implements SchemeFactory {
      public ping_resultTupleScheme getScheme() {
        return new ping_resultTupleScheme();
      }
    }

    private static class ping_resultTupleScheme extends TupleScheme<ping_result> {

      @Override
      public void write(TProtocol prot, ping_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(TProtocol prot, ping_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class controllerEvent_args implements TBase<controllerEvent_args, controllerEvent_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("controllerEvent_args");

    private static final TField CONTROLLER_STATE_FIELD_DESC = new TField("controllerState", TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new controllerEvent_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new controllerEvent_argsTupleSchemeFactory());
    }

    public ControllerState controllerState; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      CONTROLLER_STATE((short)1, "controllerState");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONTROLLER_STATE
            return CONTROLLER_STATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONTROLLER_STATE, new FieldMetaData("controllerState", TFieldRequirementType.DEFAULT,
          new StructMetaData(TType.STRUCT, ControllerState.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(controllerEvent_args.class, metaDataMap);
    }

    public controllerEvent_args() {
    }

    public controllerEvent_args(
      ControllerState controllerState)
    {
      this();
      this.controllerState = controllerState;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public controllerEvent_args(controllerEvent_args other) {
      if (other.isSetControllerState()) {
        this.controllerState = new ControllerState(other.controllerState);
      }
    }

    public controllerEvent_args deepCopy() {
      return new controllerEvent_args(this);
    }

    @Override
    public void clear() {
      this.controllerState = null;
    }

    public ControllerState getControllerState() {
      return this.controllerState;
    }

    public controllerEvent_args setControllerState(ControllerState controllerState) {
      this.controllerState = controllerState;
      return this;
    }

    public void unsetControllerState() {
      this.controllerState = null;
    }

    /** Returns true if field controllerState is set (has been assigned a value) and false otherwise */
    public boolean isSetControllerState() {
      return this.controllerState != null;
    }

    public void setControllerStateIsSet(boolean value) {
      if (!value) {
        this.controllerState = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONTROLLER_STATE:
        if (value == null) {
          unsetControllerState();
        } else {
          setControllerState((ControllerState)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONTROLLER_STATE:
        return getControllerState();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONTROLLER_STATE:
        return isSetControllerState();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof controllerEvent_args)
        return this.equals((controllerEvent_args)that);
      return false;
    }

    public boolean equals(controllerEvent_args that) {
      if (that == null)
        return false;

      boolean this_present_controllerState = true && this.isSetControllerState();
      boolean that_present_controllerState = true && that.isSetControllerState();
      if (this_present_controllerState || that_present_controllerState) {
        if (!(this_present_controllerState && that_present_controllerState))
          return false;
        if (!this.controllerState.equals(that.controllerState))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(controllerEvent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      controllerEvent_args typedOther = (controllerEvent_args)other;

      lastComparison = Boolean.valueOf(isSetControllerState()).compareTo(typedOther.isSetControllerState());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControllerState()) {
        lastComparison = TBaseHelper.compareTo(this.controllerState, typedOther.controllerState);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("controllerEvent_args(");
      boolean first = true;

      sb.append("controllerState:");
      if (this.controllerState == null) {
        sb.append("null");
      } else {
        sb.append(this.controllerState);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new TCompactProtocol(new TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new TCompactProtocol(new TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class controllerEvent_argsStandardSchemeFactory implements SchemeFactory {
      public controllerEvent_argsStandardScheme getScheme() {
        return new controllerEvent_argsStandardScheme();
      }
    }

    private static class controllerEvent_argsStandardScheme extends StandardScheme<controllerEvent_args> {

      public void read(TProtocol iprot, controllerEvent_args struct) throws TException {
        TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // CONTROLLER_STATE
              if (schemeField.type == TType.STRUCT) {
                struct.controllerState = new ControllerState();
                struct.controllerState.read(iprot);
                struct.setControllerStateIsSet(true);
              } else { 
                TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(TProtocol oprot, controllerEvent_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.controllerState != null) {
          oprot.writeFieldBegin(CONTROLLER_STATE_FIELD_DESC);
          struct.controllerState.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class controllerEvent_argsTupleSchemeFactory implements SchemeFactory {
      public controllerEvent_argsTupleScheme getScheme() {
        return new controllerEvent_argsTupleScheme();
      }
    }

    private static class controllerEvent_argsTupleScheme extends TupleScheme<controllerEvent_args> {

      @Override
      public void write(TProtocol prot, controllerEvent_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetControllerState()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetControllerState()) {
          struct.controllerState.write(oprot);
        }
      }

      @Override
      public void read(TProtocol prot, controllerEvent_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.controllerState = new ControllerState();
          struct.controllerState.read(iprot);
          struct.setControllerStateIsSet(true);
        }
      }
    }

  }

  public static class controllerEvent_result implements TBase<controllerEvent_result, controllerEvent_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("controllerEvent_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField YOU_ARE_DEAD_FIELD_DESC = new TField("youAreDead", TType.STRUCT, (short)1);
    private static final TField GAME_OVER_FIELD_DESC = new TField("gameOver", TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new controllerEvent_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new controllerEvent_resultTupleSchemeFactory());
    }

    public ControllerResult success; // required
    public YouAreDeadException youAreDead; // required
    public GameOverException gameOver; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      YOU_ARE_DEAD((short)1, "youAreDead"),
      GAME_OVER((short)2, "gameOver");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // YOU_ARE_DEAD
            return YOU_ARE_DEAD;
          case 2: // GAME_OVER
            return GAME_OVER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT,
          new StructMetaData(TType.STRUCT, ControllerResult.class)));
      tmpMap.put(_Fields.YOU_ARE_DEAD, new FieldMetaData("youAreDead", TFieldRequirementType.DEFAULT,
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.GAME_OVER, new FieldMetaData("gameOver", TFieldRequirementType.DEFAULT,
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(controllerEvent_result.class, metaDataMap);
    }

    public controllerEvent_result() {
    }

    public controllerEvent_result(
      ControllerResult success,
      YouAreDeadException youAreDead,
      GameOverException gameOver)
    {
      this();
      this.success = success;
      this.youAreDead = youAreDead;
      this.gameOver = gameOver;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public controllerEvent_result(controllerEvent_result other) {
      if (other.isSetSuccess()) {
        this.success = new ControllerResult(other.success);
      }
      if (other.isSetYouAreDead()) {
        this.youAreDead = new YouAreDeadException(other.youAreDead);
      }
      if (other.isSetGameOver()) {
        this.gameOver = new GameOverException(other.gameOver);
      }
    }

    public controllerEvent_result deepCopy() {
      return new controllerEvent_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.youAreDead = null;
      this.gameOver = null;
    }

    public ControllerResult getSuccess() {
      return this.success;
    }

    public controllerEvent_result setSuccess(ControllerResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public YouAreDeadException getYouAreDead() {
      return this.youAreDead;
    }

    public controllerEvent_result setYouAreDead(YouAreDeadException youAreDead) {
      this.youAreDead = youAreDead;
      return this;
    }

    public void unsetYouAreDead() {
      this.youAreDead = null;
    }

    /** Returns true if field youAreDead is set (has been assigned a value) and false otherwise */
    public boolean isSetYouAreDead() {
      return this.youAreDead != null;
    }

    public void setYouAreDeadIsSet(boolean value) {
      if (!value) {
        this.youAreDead = null;
      }
    }

    public GameOverException getGameOver() {
      return this.gameOver;
    }

    public controllerEvent_result setGameOver(GameOverException gameOver) {
      this.gameOver = gameOver;
      return this;
    }

    public void unsetGameOver() {
      this.gameOver = null;
    }

    /** Returns true if field gameOver is set (has been assigned a value) and false otherwise */
    public boolean isSetGameOver() {
      return this.gameOver != null;
    }

    public void setGameOverIsSet(boolean value) {
      if (!value) {
        this.gameOver = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ControllerResult)value);
        }
        break;

      case YOU_ARE_DEAD:
        if (value == null) {
          unsetYouAreDead();
        } else {
          setYouAreDead((YouAreDeadException)value);
        }
        break;

      case GAME_OVER:
        if (value == null) {
          unsetGameOver();
        } else {
          setGameOver((GameOverException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case YOU_ARE_DEAD:
        return getYouAreDead();

      case GAME_OVER:
        return getGameOver();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case YOU_ARE_DEAD:
        return isSetYouAreDead();
      case GAME_OVER:
        return isSetGameOver();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof controllerEvent_result)
        return this.equals((controllerEvent_result)that);
      return false;
    }

    public boolean equals(controllerEvent_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_youAreDead = true && this.isSetYouAreDead();
      boolean that_present_youAreDead = true && that.isSetYouAreDead();
      if (this_present_youAreDead || that_present_youAreDead) {
        if (!(this_present_youAreDead && that_present_youAreDead))
          return false;
        if (!this.youAreDead.equals(that.youAreDead))
          return false;
      }

      boolean this_present_gameOver = true && this.isSetGameOver();
      boolean that_present_gameOver = true && that.isSetGameOver();
      if (this_present_gameOver || that_present_gameOver) {
        if (!(this_present_gameOver && that_present_gameOver))
          return false;
        if (!this.gameOver.equals(that.gameOver))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(controllerEvent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      controllerEvent_result typedOther = (controllerEvent_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetYouAreDead()).compareTo(typedOther.isSetYouAreDead());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetYouAreDead()) {
        lastComparison = TBaseHelper.compareTo(this.youAreDead, typedOther.youAreDead);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGameOver()).compareTo(typedOther.isSetGameOver());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGameOver()) {
        lastComparison = TBaseHelper.compareTo(this.gameOver, typedOther.gameOver);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("controllerEvent_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("youAreDead:");
      if (this.youAreDead == null) {
        sb.append("null");
      } else {
        sb.append(this.youAreDead);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("gameOver:");
      if (this.gameOver == null) {
        sb.append("null");
      } else {
        sb.append(this.gameOver);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new TCompactProtocol(new TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new TCompactProtocol(new TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class controllerEvent_resultStandardSchemeFactory implements SchemeFactory {
      public controllerEvent_resultStandardScheme getScheme() {
        return new controllerEvent_resultStandardScheme();
      }
    }

    private static class controllerEvent_resultStandardScheme extends StandardScheme<controllerEvent_result> {

      public void read(TProtocol iprot, controllerEvent_result struct) throws TException {
        TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == TType.STRUCT) {
                struct.success = new ControllerResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // YOU_ARE_DEAD
              if (schemeField.type == TType.STRUCT) {
                struct.youAreDead = new YouAreDeadException();
                struct.youAreDead.read(iprot);
                struct.setYouAreDeadIsSet(true);
              } else { 
                TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // GAME_OVER
              if (schemeField.type == TType.STRUCT) {
                struct.gameOver = new GameOverException();
                struct.gameOver.read(iprot);
                struct.setGameOverIsSet(true);
              } else { 
                TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(TProtocol oprot, controllerEvent_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.youAreDead != null) {
          oprot.writeFieldBegin(YOU_ARE_DEAD_FIELD_DESC);
          struct.youAreDead.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.gameOver != null) {
          oprot.writeFieldBegin(GAME_OVER_FIELD_DESC);
          struct.gameOver.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class controllerEvent_resultTupleSchemeFactory implements SchemeFactory {
      public controllerEvent_resultTupleScheme getScheme() {
        return new controllerEvent_resultTupleScheme();
      }
    }

    private static class controllerEvent_resultTupleScheme extends TupleScheme<controllerEvent_result> {

      @Override
      public void write(TProtocol prot, controllerEvent_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetYouAreDead()) {
          optionals.set(1);
        }
        if (struct.isSetGameOver()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetYouAreDead()) {
          struct.youAreDead.write(oprot);
        }
        if (struct.isSetGameOver()) {
          struct.gameOver.write(oprot);
        }
      }

      @Override
      public void read(TProtocol prot, controllerEvent_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new ControllerResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.youAreDead = new YouAreDeadException();
          struct.youAreDead.read(iprot);
          struct.setYouAreDeadIsSet(true);
        }
        if (incoming.get(2)) {
          struct.gameOver = new GameOverException();
          struct.gameOver.read(iprot);
          struct.setGameOverIsSet(true);
        }
      }
    }

  }

  public static class move_args implements TBase<move_args, move_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("move_args");

    private static final TField MOVE_ACTION_FIELD_DESC = new TField("moveAction", TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new move_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new move_argsTupleSchemeFactory());
    }

    public MoveAction moveAction; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      MOVE_ACTION((short)1, "moveAction");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MOVE_ACTION
            return MOVE_ACTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MOVE_ACTION, new FieldMetaData("moveAction", TFieldRequirementType.DEFAULT,
          new StructMetaData(TType.STRUCT, MoveAction.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(move_args.class, metaDataMap);
    }

    public move_args() {
    }

    public move_args(
      MoveAction moveAction)
    {
      this();
      this.moveAction = moveAction;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public move_args(move_args other) {
      if (other.isSetMoveAction()) {
        this.moveAction = new MoveAction(other.moveAction);
      }
    }

    public move_args deepCopy() {
      return new move_args(this);
    }

    @Override
    public void clear() {
      this.moveAction = null;
    }

    public MoveAction getMoveAction() {
      return this.moveAction;
    }

    public move_args setMoveAction(MoveAction moveAction) {
      this.moveAction = moveAction;
      return this;
    }

    public void unsetMoveAction() {
      this.moveAction = null;
    }

    /** Returns true if field moveAction is set (has been assigned a value) and false otherwise */
    public boolean isSetMoveAction() {
      return this.moveAction != null;
    }

    public void setMoveActionIsSet(boolean value) {
      if (!value) {
        this.moveAction = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MOVE_ACTION:
        if (value == null) {
          unsetMoveAction();
        } else {
          setMoveAction((MoveAction)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MOVE_ACTION:
        return getMoveAction();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MOVE_ACTION:
        return isSetMoveAction();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof move_args)
        return this.equals((move_args)that);
      return false;
    }

    public boolean equals(move_args that) {
      if (that == null)
        return false;

      boolean this_present_moveAction = true && this.isSetMoveAction();
      boolean that_present_moveAction = true && that.isSetMoveAction();
      if (this_present_moveAction || that_present_moveAction) {
        if (!(this_present_moveAction && that_present_moveAction))
          return false;
        if (!this.moveAction.equals(that.moveAction))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(move_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      move_args typedOther = (move_args)other;

      lastComparison = Boolean.valueOf(isSetMoveAction()).compareTo(typedOther.isSetMoveAction());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMoveAction()) {
        lastComparison = TBaseHelper.compareTo(this.moveAction, typedOther.moveAction);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("move_args(");
      boolean first = true;

      sb.append("moveAction:");
      if (this.moveAction == null) {
        sb.append("null");
      } else {
        sb.append(this.moveAction);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new TCompactProtocol(new TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new TCompactProtocol(new TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class move_argsStandardSchemeFactory implements SchemeFactory {
      public move_argsStandardScheme getScheme() {
        return new move_argsStandardScheme();
      }
    }

    private static class move_argsStandardScheme extends StandardScheme<move_args> {

      public void read(TProtocol iprot, move_args struct) throws TException {
        TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // MOVE_ACTION
              if (schemeField.type == TType.STRUCT) {
                struct.moveAction = new MoveAction();
                struct.moveAction.read(iprot);
                struct.setMoveActionIsSet(true);
              } else { 
                TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(TProtocol oprot, move_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.moveAction != null) {
          oprot.writeFieldBegin(MOVE_ACTION_FIELD_DESC);
          struct.moveAction.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class move_argsTupleSchemeFactory implements SchemeFactory {
      public move_argsTupleScheme getScheme() {
        return new move_argsTupleScheme();
      }
    }

    private static class move_argsTupleScheme extends TupleScheme<move_args> {

      @Override
      public void write(TProtocol prot, move_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMoveAction()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMoveAction()) {
          struct.moveAction.write(oprot);
        }
      }

      @Override
      public void read(TProtocol prot, move_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.moveAction = new MoveAction();
          struct.moveAction.read(iprot);
          struct.setMoveActionIsSet(true);
        }
      }
    }

  }

  public static class move_result implements TBase<move_result, move_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("move_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField YOU_ARE_DEAD_FIELD_DESC = new TField("youAreDead", TType.STRUCT, (short)1);
    private static final TField GAME_OVER_FIELD_DESC = new TField("gameOver", TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new move_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new move_resultTupleSchemeFactory());
    }

    public MoveActionResult success; // required
    public YouAreDeadException youAreDead; // required
    public GameOverException gameOver; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      YOU_ARE_DEAD((short)1, "youAreDead"),
      GAME_OVER((short)2, "gameOver");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // YOU_ARE_DEAD
            return YOU_ARE_DEAD;
          case 2: // GAME_OVER
            return GAME_OVER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT,
          new StructMetaData(TType.STRUCT, MoveActionResult.class)));
      tmpMap.put(_Fields.YOU_ARE_DEAD, new FieldMetaData("youAreDead", TFieldRequirementType.DEFAULT,
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.GAME_OVER, new FieldMetaData("gameOver", TFieldRequirementType.DEFAULT,
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(move_result.class, metaDataMap);
    }

    public move_result() {
    }

    public move_result(
      MoveActionResult success,
      YouAreDeadException youAreDead,
      GameOverException gameOver)
    {
      this();
      this.success = success;
      this.youAreDead = youAreDead;
      this.gameOver = gameOver;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public move_result(move_result other) {
      if (other.isSetSuccess()) {
        this.success = new MoveActionResult(other.success);
      }
      if (other.isSetYouAreDead()) {
        this.youAreDead = new YouAreDeadException(other.youAreDead);
      }
      if (other.isSetGameOver()) {
        this.gameOver = new GameOverException(other.gameOver);
      }
    }

    public move_result deepCopy() {
      return new move_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.youAreDead = null;
      this.gameOver = null;
    }

    public MoveActionResult getSuccess() {
      return this.success;
    }

    public move_result setSuccess(MoveActionResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public YouAreDeadException getYouAreDead() {
      return this.youAreDead;
    }

    public move_result setYouAreDead(YouAreDeadException youAreDead) {
      this.youAreDead = youAreDead;
      return this;
    }

    public void unsetYouAreDead() {
      this.youAreDead = null;
    }

    /** Returns true if field youAreDead is set (has been assigned a value) and false otherwise */
    public boolean isSetYouAreDead() {
      return this.youAreDead != null;
    }

    public void setYouAreDeadIsSet(boolean value) {
      if (!value) {
        this.youAreDead = null;
      }
    }

    public GameOverException getGameOver() {
      return this.gameOver;
    }

    public move_result setGameOver(GameOverException gameOver) {
      this.gameOver = gameOver;
      return this;
    }

    public void unsetGameOver() {
      this.gameOver = null;
    }

    /** Returns true if field gameOver is set (has been assigned a value) and false otherwise */
    public boolean isSetGameOver() {
      return this.gameOver != null;
    }

    public void setGameOverIsSet(boolean value) {
      if (!value) {
        this.gameOver = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MoveActionResult)value);
        }
        break;

      case YOU_ARE_DEAD:
        if (value == null) {
          unsetYouAreDead();
        } else {
          setYouAreDead((YouAreDeadException)value);
        }
        break;

      case GAME_OVER:
        if (value == null) {
          unsetGameOver();
        } else {
          setGameOver((GameOverException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case YOU_ARE_DEAD:
        return getYouAreDead();

      case GAME_OVER:
        return getGameOver();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case YOU_ARE_DEAD:
        return isSetYouAreDead();
      case GAME_OVER:
        return isSetGameOver();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof move_result)
        return this.equals((move_result)that);
      return false;
    }

    public boolean equals(move_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_youAreDead = true && this.isSetYouAreDead();
      boolean that_present_youAreDead = true && that.isSetYouAreDead();
      if (this_present_youAreDead || that_present_youAreDead) {
        if (!(this_present_youAreDead && that_present_youAreDead))
          return false;
        if (!this.youAreDead.equals(that.youAreDead))
          return false;
      }

      boolean this_present_gameOver = true && this.isSetGameOver();
      boolean that_present_gameOver = true && that.isSetGameOver();
      if (this_present_gameOver || that_present_gameOver) {
        if (!(this_present_gameOver && that_present_gameOver))
          return false;
        if (!this.gameOver.equals(that.gameOver))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(move_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      move_result typedOther = (move_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetYouAreDead()).compareTo(typedOther.isSetYouAreDead());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetYouAreDead()) {
        lastComparison = TBaseHelper.compareTo(this.youAreDead, typedOther.youAreDead);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGameOver()).compareTo(typedOther.isSetGameOver());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGameOver()) {
        lastComparison = TBaseHelper.compareTo(this.gameOver, typedOther.gameOver);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("move_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("youAreDead:");
      if (this.youAreDead == null) {
        sb.append("null");
      } else {
        sb.append(this.youAreDead);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("gameOver:");
      if (this.gameOver == null) {
        sb.append("null");
      } else {
        sb.append(this.gameOver);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new TCompactProtocol(new TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new TCompactProtocol(new TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class move_resultStandardSchemeFactory implements SchemeFactory {
      public move_resultStandardScheme getScheme() {
        return new move_resultStandardScheme();
      }
    }

    private static class move_resultStandardScheme extends StandardScheme<move_result> {

      public void read(TProtocol iprot, move_result struct) throws TException {
        TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == TType.STRUCT) {
                struct.success = new MoveActionResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // YOU_ARE_DEAD
              if (schemeField.type == TType.STRUCT) {
                struct.youAreDead = new YouAreDeadException();
                struct.youAreDead.read(iprot);
                struct.setYouAreDeadIsSet(true);
              } else { 
                TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // GAME_OVER
              if (schemeField.type == TType.STRUCT) {
                struct.gameOver = new GameOverException();
                struct.gameOver.read(iprot);
                struct.setGameOverIsSet(true);
              } else { 
                TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(TProtocol oprot, move_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.youAreDead != null) {
          oprot.writeFieldBegin(YOU_ARE_DEAD_FIELD_DESC);
          struct.youAreDead.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.gameOver != null) {
          oprot.writeFieldBegin(GAME_OVER_FIELD_DESC);
          struct.gameOver.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class move_resultTupleSchemeFactory implements SchemeFactory {
      public move_resultTupleScheme getScheme() {
        return new move_resultTupleScheme();
      }
    }

    private static class move_resultTupleScheme extends TupleScheme<move_result> {

      @Override
      public void write(TProtocol prot, move_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetYouAreDead()) {
          optionals.set(1);
        }
        if (struct.isSetGameOver()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetYouAreDead()) {
          struct.youAreDead.write(oprot);
        }
        if (struct.isSetGameOver()) {
          struct.gameOver.write(oprot);
        }
      }

      @Override
      public void read(TProtocol prot, move_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new MoveActionResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.youAreDead = new YouAreDeadException();
          struct.youAreDead.read(iprot);
          struct.setYouAreDeadIsSet(true);
        }
        if (incoming.get(2)) {
          struct.gameOver = new GameOverException();
          struct.gameOver.read(iprot);
          struct.setGameOverIsSet(true);
        }
      }
    }

  }

  public static class bomb_args implements TBase<bomb_args, bomb_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("bomb_args");

    private static final TField BOMB_ACTION_FIELD_DESC = new TField("bombAction", TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bomb_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bomb_argsTupleSchemeFactory());
    }

    public BombAction bombAction; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      BOMB_ACTION((short)1, "bombAction");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BOMB_ACTION
            return BOMB_ACTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BOMB_ACTION, new FieldMetaData("bombAction", TFieldRequirementType.DEFAULT,
          new StructMetaData(TType.STRUCT, BombAction.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(bomb_args.class, metaDataMap);
    }

    public bomb_args() {
    }

    public bomb_args(
      BombAction bombAction)
    {
      this();
      this.bombAction = bombAction;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bomb_args(bomb_args other) {
      if (other.isSetBombAction()) {
        this.bombAction = new BombAction(other.bombAction);
      }
    }

    public bomb_args deepCopy() {
      return new bomb_args(this);
    }

    @Override
    public void clear() {
      this.bombAction = null;
    }

    public BombAction getBombAction() {
      return this.bombAction;
    }

    public bomb_args setBombAction(BombAction bombAction) {
      this.bombAction = bombAction;
      return this;
    }

    public void unsetBombAction() {
      this.bombAction = null;
    }

    /** Returns true if field bombAction is set (has been assigned a value) and false otherwise */
    public boolean isSetBombAction() {
      return this.bombAction != null;
    }

    public void setBombActionIsSet(boolean value) {
      if (!value) {
        this.bombAction = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BOMB_ACTION:
        if (value == null) {
          unsetBombAction();
        } else {
          setBombAction((BombAction)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BOMB_ACTION:
        return getBombAction();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BOMB_ACTION:
        return isSetBombAction();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bomb_args)
        return this.equals((bomb_args)that);
      return false;
    }

    public boolean equals(bomb_args that) {
      if (that == null)
        return false;

      boolean this_present_bombAction = true && this.isSetBombAction();
      boolean that_present_bombAction = true && that.isSetBombAction();
      if (this_present_bombAction || that_present_bombAction) {
        if (!(this_present_bombAction && that_present_bombAction))
          return false;
        if (!this.bombAction.equals(that.bombAction))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(bomb_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      bomb_args typedOther = (bomb_args)other;

      lastComparison = Boolean.valueOf(isSetBombAction()).compareTo(typedOther.isSetBombAction());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBombAction()) {
        lastComparison = TBaseHelper.compareTo(this.bombAction, typedOther.bombAction);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bomb_args(");
      boolean first = true;

      sb.append("bombAction:");
      if (this.bombAction == null) {
        sb.append("null");
      } else {
        sb.append(this.bombAction);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new TCompactProtocol(new TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new TCompactProtocol(new TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bomb_argsStandardSchemeFactory implements SchemeFactory {
      public bomb_argsStandardScheme getScheme() {
        return new bomb_argsStandardScheme();
      }
    }

    private static class bomb_argsStandardScheme extends StandardScheme<bomb_args> {

      public void read(TProtocol iprot, bomb_args struct) throws TException {
        TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // BOMB_ACTION
              if (schemeField.type == TType.STRUCT) {
                struct.bombAction = new BombAction();
                struct.bombAction.read(iprot);
                struct.setBombActionIsSet(true);
              } else { 
                TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(TProtocol oprot, bomb_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bombAction != null) {
          oprot.writeFieldBegin(BOMB_ACTION_FIELD_DESC);
          struct.bombAction.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bomb_argsTupleSchemeFactory implements SchemeFactory {
      public bomb_argsTupleScheme getScheme() {
        return new bomb_argsTupleScheme();
      }
    }

    private static class bomb_argsTupleScheme extends TupleScheme<bomb_args> {

      @Override
      public void write(TProtocol prot, bomb_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBombAction()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBombAction()) {
          struct.bombAction.write(oprot);
        }
      }

      @Override
      public void read(TProtocol prot, bomb_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bombAction = new BombAction();
          struct.bombAction.read(iprot);
          struct.setBombActionIsSet(true);
        }
      }
    }

  }

  public static class bomb_result implements TBase<bomb_result, bomb_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("bomb_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField YOU_ARE_DEAD_FIELD_DESC = new TField("youAreDead", TType.STRUCT, (short)1);
    private static final TField GAME_OVER_FIELD_DESC = new TField("gameOver", TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bomb_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bomb_resultTupleSchemeFactory());
    }

    public BombActionResult success; // required
    public YouAreDeadException youAreDead; // required
    public GameOverException gameOver; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      YOU_ARE_DEAD((short)1, "youAreDead"),
      GAME_OVER((short)2, "gameOver");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // YOU_ARE_DEAD
            return YOU_ARE_DEAD;
          case 2: // GAME_OVER
            return GAME_OVER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT,
          new StructMetaData(TType.STRUCT, BombActionResult.class)));
      tmpMap.put(_Fields.YOU_ARE_DEAD, new FieldMetaData("youAreDead", TFieldRequirementType.DEFAULT,
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.GAME_OVER, new FieldMetaData("gameOver", TFieldRequirementType.DEFAULT,
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(bomb_result.class, metaDataMap);
    }

    public bomb_result() {
    }

    public bomb_result(
      BombActionResult success,
      YouAreDeadException youAreDead,
      GameOverException gameOver)
    {
      this();
      this.success = success;
      this.youAreDead = youAreDead;
      this.gameOver = gameOver;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bomb_result(bomb_result other) {
      if (other.isSetSuccess()) {
        this.success = new BombActionResult(other.success);
      }
      if (other.isSetYouAreDead()) {
        this.youAreDead = new YouAreDeadException(other.youAreDead);
      }
      if (other.isSetGameOver()) {
        this.gameOver = new GameOverException(other.gameOver);
      }
    }

    public bomb_result deepCopy() {
      return new bomb_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.youAreDead = null;
      this.gameOver = null;
    }

    public BombActionResult getSuccess() {
      return this.success;
    }

    public bomb_result setSuccess(BombActionResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public YouAreDeadException getYouAreDead() {
      return this.youAreDead;
    }

    public bomb_result setYouAreDead(YouAreDeadException youAreDead) {
      this.youAreDead = youAreDead;
      return this;
    }

    public void unsetYouAreDead() {
      this.youAreDead = null;
    }

    /** Returns true if field youAreDead is set (has been assigned a value) and false otherwise */
    public boolean isSetYouAreDead() {
      return this.youAreDead != null;
    }

    public void setYouAreDeadIsSet(boolean value) {
      if (!value) {
        this.youAreDead = null;
      }
    }

    public GameOverException getGameOver() {
      return this.gameOver;
    }

    public bomb_result setGameOver(GameOverException gameOver) {
      this.gameOver = gameOver;
      return this;
    }

    public void unsetGameOver() {
      this.gameOver = null;
    }

    /** Returns true if field gameOver is set (has been assigned a value) and false otherwise */
    public boolean isSetGameOver() {
      return this.gameOver != null;
    }

    public void setGameOverIsSet(boolean value) {
      if (!value) {
        this.gameOver = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((BombActionResult)value);
        }
        break;

      case YOU_ARE_DEAD:
        if (value == null) {
          unsetYouAreDead();
        } else {
          setYouAreDead((YouAreDeadException)value);
        }
        break;

      case GAME_OVER:
        if (value == null) {
          unsetGameOver();
        } else {
          setGameOver((GameOverException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case YOU_ARE_DEAD:
        return getYouAreDead();

      case GAME_OVER:
        return getGameOver();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case YOU_ARE_DEAD:
        return isSetYouAreDead();
      case GAME_OVER:
        return isSetGameOver();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bomb_result)
        return this.equals((bomb_result)that);
      return false;
    }

    public boolean equals(bomb_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_youAreDead = true && this.isSetYouAreDead();
      boolean that_present_youAreDead = true && that.isSetYouAreDead();
      if (this_present_youAreDead || that_present_youAreDead) {
        if (!(this_present_youAreDead && that_present_youAreDead))
          return false;
        if (!this.youAreDead.equals(that.youAreDead))
          return false;
      }

      boolean this_present_gameOver = true && this.isSetGameOver();
      boolean that_present_gameOver = true && that.isSetGameOver();
      if (this_present_gameOver || that_present_gameOver) {
        if (!(this_present_gameOver && that_present_gameOver))
          return false;
        if (!this.gameOver.equals(that.gameOver))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(bomb_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      bomb_result typedOther = (bomb_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetYouAreDead()).compareTo(typedOther.isSetYouAreDead());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetYouAreDead()) {
        lastComparison = TBaseHelper.compareTo(this.youAreDead, typedOther.youAreDead);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGameOver()).compareTo(typedOther.isSetGameOver());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGameOver()) {
        lastComparison = TBaseHelper.compareTo(this.gameOver, typedOther.gameOver);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bomb_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("youAreDead:");
      if (this.youAreDead == null) {
        sb.append("null");
      } else {
        sb.append(this.youAreDead);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("gameOver:");
      if (this.gameOver == null) {
        sb.append("null");
      } else {
        sb.append(this.gameOver);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new TCompactProtocol(new TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new TCompactProtocol(new TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bomb_resultStandardSchemeFactory implements SchemeFactory {
      public bomb_resultStandardScheme getScheme() {
        return new bomb_resultStandardScheme();
      }
    }

    private static class bomb_resultStandardScheme extends StandardScheme<bomb_result> {

      public void read(TProtocol iprot, bomb_result struct) throws TException {
        TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == TType.STRUCT) {
                struct.success = new BombActionResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // YOU_ARE_DEAD
              if (schemeField.type == TType.STRUCT) {
                struct.youAreDead = new YouAreDeadException();
                struct.youAreDead.read(iprot);
                struct.setYouAreDeadIsSet(true);
              } else { 
                TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // GAME_OVER
              if (schemeField.type == TType.STRUCT) {
                struct.gameOver = new GameOverException();
                struct.gameOver.read(iprot);
                struct.setGameOverIsSet(true);
              } else { 
                TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(TProtocol oprot, bomb_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.youAreDead != null) {
          oprot.writeFieldBegin(YOU_ARE_DEAD_FIELD_DESC);
          struct.youAreDead.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.gameOver != null) {
          oprot.writeFieldBegin(GAME_OVER_FIELD_DESC);
          struct.gameOver.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bomb_resultTupleSchemeFactory implements SchemeFactory {
      public bomb_resultTupleScheme getScheme() {
        return new bomb_resultTupleScheme();
      }
    }

    private static class bomb_resultTupleScheme extends TupleScheme<bomb_result> {

      @Override
      public void write(TProtocol prot, bomb_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetYouAreDead()) {
          optionals.set(1);
        }
        if (struct.isSetGameOver()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetYouAreDead()) {
          struct.youAreDead.write(oprot);
        }
        if (struct.isSetGameOver()) {
          struct.gameOver.write(oprot);
        }
      }

      @Override
      public void read(TProtocol prot, bomb_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new BombActionResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.youAreDead = new YouAreDeadException();
          struct.youAreDead.read(iprot);
          struct.setYouAreDeadIsSet(true);
        }
        if (incoming.get(2)) {
          struct.gameOver = new GameOverException();
          struct.gameOver.read(iprot);
          struct.setGameOverIsSet(true);
        }
      }
    }

  }

  public static class waitTicks_args implements TBase<waitTicks_args, waitTicks_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("waitTicks_args");

    private static final TField TICKS_FIELD_DESC = new TField("ticks", TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new waitTicks_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new waitTicks_argsTupleSchemeFactory());
    }

    public int ticks; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      TICKS((short)1, "ticks");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TICKS
            return TICKS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TICKS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TICKS, new FieldMetaData("ticks", TFieldRequirementType.DEFAULT,
          new FieldValueMetaData(TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(waitTicks_args.class, metaDataMap);
    }

    public waitTicks_args() {
    }

    public waitTicks_args(
      int ticks)
    {
      this();
      this.ticks = ticks;
      setTicksIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public waitTicks_args(waitTicks_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ticks = other.ticks;
    }

    public waitTicks_args deepCopy() {
      return new waitTicks_args(this);
    }

    @Override
    public void clear() {
      setTicksIsSet(false);
      this.ticks = 0;
    }

    public int getTicks() {
      return this.ticks;
    }

    public waitTicks_args setTicks(int ticks) {
      this.ticks = ticks;
      setTicksIsSet(true);
      return this;
    }

    public void unsetTicks() {
      __isset_bit_vector.clear(__TICKS_ISSET_ID);
    }

    /** Returns true if field ticks is set (has been assigned a value) and false otherwise */
    public boolean isSetTicks() {
      return __isset_bit_vector.get(__TICKS_ISSET_ID);
    }

    public void setTicksIsSet(boolean value) {
      __isset_bit_vector.set(__TICKS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TICKS:
        if (value == null) {
          unsetTicks();
        } else {
          setTicks((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TICKS:
        return Integer.valueOf(getTicks());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TICKS:
        return isSetTicks();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof waitTicks_args)
        return this.equals((waitTicks_args)that);
      return false;
    }

    public boolean equals(waitTicks_args that) {
      if (that == null)
        return false;

      boolean this_present_ticks = true;
      boolean that_present_ticks = true;
      if (this_present_ticks || that_present_ticks) {
        if (!(this_present_ticks && that_present_ticks))
          return false;
        if (this.ticks != that.ticks)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(waitTicks_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      waitTicks_args typedOther = (waitTicks_args)other;

      lastComparison = Boolean.valueOf(isSetTicks()).compareTo(typedOther.isSetTicks());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTicks()) {
        lastComparison = TBaseHelper.compareTo(this.ticks, typedOther.ticks);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("waitTicks_args(");
      boolean first = true;

      sb.append("ticks:");
      sb.append(this.ticks);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new TCompactProtocol(new TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new TCompactProtocol(new TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class waitTicks_argsStandardSchemeFactory implements SchemeFactory {
      public waitTicks_argsStandardScheme getScheme() {
        return new waitTicks_argsStandardScheme();
      }
    }

    private static class waitTicks_argsStandardScheme extends StandardScheme<waitTicks_args> {

      public void read(TProtocol iprot, waitTicks_args struct) throws TException {
        TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // TICKS
              if (schemeField.type == TType.I32) {
                struct.ticks = iprot.readI32();
                struct.setTicksIsSet(true);
              } else { 
                TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(TProtocol oprot, waitTicks_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TICKS_FIELD_DESC);
        oprot.writeI32(struct.ticks);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class waitTicks_argsTupleSchemeFactory implements SchemeFactory {
      public waitTicks_argsTupleScheme getScheme() {
        return new waitTicks_argsTupleScheme();
      }
    }

    private static class waitTicks_argsTupleScheme extends TupleScheme<waitTicks_args> {

      @Override
      public void write(TProtocol prot, waitTicks_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTicks()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTicks()) {
          oprot.writeI32(struct.ticks);
        }
      }

      @Override
      public void read(TProtocol prot, waitTicks_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ticks = iprot.readI32();
          struct.setTicksIsSet(true);
        }
      }
    }

  }

  public static class waitTicks_result implements TBase<waitTicks_result, waitTicks_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("waitTicks_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField YOU_ARE_DEAD_FIELD_DESC = new TField("youAreDead", TType.STRUCT, (short)1);
    private static final TField GAME_OVER_FIELD_DESC = new TField("gameOver", TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new waitTicks_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new waitTicks_resultTupleSchemeFactory());
    }

    public MapState success; // required
    public YouAreDeadException youAreDead; // required
    public GameOverException gameOver; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      YOU_ARE_DEAD((short)1, "youAreDead"),
      GAME_OVER((short)2, "gameOver");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // YOU_ARE_DEAD
            return YOU_ARE_DEAD;
          case 2: // GAME_OVER
            return GAME_OVER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT,
          new StructMetaData(TType.STRUCT, MapState.class)));
      tmpMap.put(_Fields.YOU_ARE_DEAD, new FieldMetaData("youAreDead", TFieldRequirementType.DEFAULT,
          new FieldValueMetaData(TType.STRUCT)));
      tmpMap.put(_Fields.GAME_OVER, new FieldMetaData("gameOver", TFieldRequirementType.DEFAULT,
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(waitTicks_result.class, metaDataMap);
    }

    public waitTicks_result() {
    }

    public waitTicks_result(
      MapState success,
      YouAreDeadException youAreDead,
      GameOverException gameOver)
    {
      this();
      this.success = success;
      this.youAreDead = youAreDead;
      this.gameOver = gameOver;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public waitTicks_result(waitTicks_result other) {
      if (other.isSetSuccess()) {
        this.success = new MapState(other.success);
      }
      if (other.isSetYouAreDead()) {
        this.youAreDead = new YouAreDeadException(other.youAreDead);
      }
      if (other.isSetGameOver()) {
        this.gameOver = new GameOverException(other.gameOver);
      }
    }

    public waitTicks_result deepCopy() {
      return new waitTicks_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.youAreDead = null;
      this.gameOver = null;
    }

    public MapState getSuccess() {
      return this.success;
    }

    public waitTicks_result setSuccess(MapState success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public YouAreDeadException getYouAreDead() {
      return this.youAreDead;
    }

    public waitTicks_result setYouAreDead(YouAreDeadException youAreDead) {
      this.youAreDead = youAreDead;
      return this;
    }

    public void unsetYouAreDead() {
      this.youAreDead = null;
    }

    /** Returns true if field youAreDead is set (has been assigned a value) and false otherwise */
    public boolean isSetYouAreDead() {
      return this.youAreDead != null;
    }

    public void setYouAreDeadIsSet(boolean value) {
      if (!value) {
        this.youAreDead = null;
      }
    }

    public GameOverException getGameOver() {
      return this.gameOver;
    }

    public waitTicks_result setGameOver(GameOverException gameOver) {
      this.gameOver = gameOver;
      return this;
    }

    public void unsetGameOver() {
      this.gameOver = null;
    }

    /** Returns true if field gameOver is set (has been assigned a value) and false otherwise */
    public boolean isSetGameOver() {
      return this.gameOver != null;
    }

    public void setGameOverIsSet(boolean value) {
      if (!value) {
        this.gameOver = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MapState)value);
        }
        break;

      case YOU_ARE_DEAD:
        if (value == null) {
          unsetYouAreDead();
        } else {
          setYouAreDead((YouAreDeadException)value);
        }
        break;

      case GAME_OVER:
        if (value == null) {
          unsetGameOver();
        } else {
          setGameOver((GameOverException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case YOU_ARE_DEAD:
        return getYouAreDead();

      case GAME_OVER:
        return getGameOver();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case YOU_ARE_DEAD:
        return isSetYouAreDead();
      case GAME_OVER:
        return isSetGameOver();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof waitTicks_result)
        return this.equals((waitTicks_result)that);
      return false;
    }

    public boolean equals(waitTicks_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_youAreDead = true && this.isSetYouAreDead();
      boolean that_present_youAreDead = true && that.isSetYouAreDead();
      if (this_present_youAreDead || that_present_youAreDead) {
        if (!(this_present_youAreDead && that_present_youAreDead))
          return false;
        if (!this.youAreDead.equals(that.youAreDead))
          return false;
      }

      boolean this_present_gameOver = true && this.isSetGameOver();
      boolean that_present_gameOver = true && that.isSetGameOver();
      if (this_present_gameOver || that_present_gameOver) {
        if (!(this_present_gameOver && that_present_gameOver))
          return false;
        if (!this.gameOver.equals(that.gameOver))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(waitTicks_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      waitTicks_result typedOther = (waitTicks_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetYouAreDead()).compareTo(typedOther.isSetYouAreDead());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetYouAreDead()) {
        lastComparison = TBaseHelper.compareTo(this.youAreDead, typedOther.youAreDead);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGameOver()).compareTo(typedOther.isSetGameOver());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGameOver()) {
        lastComparison = TBaseHelper.compareTo(this.gameOver, typedOther.gameOver);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("waitTicks_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("youAreDead:");
      if (this.youAreDead == null) {
        sb.append("null");
      } else {
        sb.append(this.youAreDead);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("gameOver:");
      if (this.gameOver == null) {
        sb.append("null");
      } else {
        sb.append(this.gameOver);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new TCompactProtocol(new TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new TCompactProtocol(new TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class waitTicks_resultStandardSchemeFactory implements SchemeFactory {
      public waitTicks_resultStandardScheme getScheme() {
        return new waitTicks_resultStandardScheme();
      }
    }

    private static class waitTicks_resultStandardScheme extends StandardScheme<waitTicks_result> {

      public void read(TProtocol iprot, waitTicks_result struct) throws TException {
        TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == TType.STRUCT) {
                struct.success = new MapState();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // YOU_ARE_DEAD
              if (schemeField.type == TType.STRUCT) {
                struct.youAreDead = new YouAreDeadException();
                struct.youAreDead.read(iprot);
                struct.setYouAreDeadIsSet(true);
              } else { 
                TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // GAME_OVER
              if (schemeField.type == TType.STRUCT) {
                struct.gameOver = new GameOverException();
                struct.gameOver.read(iprot);
                struct.setGameOverIsSet(true);
              } else { 
                TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(TProtocol oprot, waitTicks_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.youAreDead != null) {
          oprot.writeFieldBegin(YOU_ARE_DEAD_FIELD_DESC);
          struct.youAreDead.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.gameOver != null) {
          oprot.writeFieldBegin(GAME_OVER_FIELD_DESC);
          struct.gameOver.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class waitTicks_resultTupleSchemeFactory implements SchemeFactory {
      public waitTicks_resultTupleScheme getScheme() {
        return new waitTicks_resultTupleScheme();
      }
    }

    private static class waitTicks_resultTupleScheme extends TupleScheme<waitTicks_result> {

      @Override
      public void write(TProtocol prot, waitTicks_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetYouAreDead()) {
          optionals.set(1);
        }
        if (struct.isSetGameOver()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetYouAreDead()) {
          struct.youAreDead.write(oprot);
        }
        if (struct.isSetGameOver()) {
          struct.gameOver.write(oprot);
        }
      }

      @Override
      public void read(TProtocol prot, waitTicks_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new MapState();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.youAreDead = new YouAreDeadException();
          struct.youAreDead.read(iprot);
          struct.setYouAreDeadIsSet(true);
        }
        if (incoming.get(2)) {
          struct.gameOver = new GameOverException();
          struct.gameOver.read(iprot);
          struct.setGameOverIsSet(true);
        }
      }
    }

  }

  public static class joinGame_args implements TBase<joinGame_args, joinGame_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("joinGame_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new joinGame_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new joinGame_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(joinGame_args.class, metaDataMap);
    }

    public joinGame_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public joinGame_args(joinGame_args other) {
    }

    public joinGame_args deepCopy() {
      return new joinGame_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof joinGame_args)
        return this.equals((joinGame_args)that);
      return false;
    }

    public boolean equals(joinGame_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(joinGame_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      joinGame_args typedOther = (joinGame_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("joinGame_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new TCompactProtocol(new TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new TCompactProtocol(new TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class joinGame_argsStandardSchemeFactory implements SchemeFactory {
      public joinGame_argsStandardScheme getScheme() {
        return new joinGame_argsStandardScheme();
      }
    }

    private static class joinGame_argsStandardScheme extends StandardScheme<joinGame_args> {

      public void read(TProtocol iprot, joinGame_args struct) throws TException {
        TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            default:
              TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(TProtocol oprot, joinGame_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class joinGame_argsTupleSchemeFactory implements SchemeFactory {
      public joinGame_argsTupleScheme getScheme() {
        return new joinGame_argsTupleScheme();
      }
    }

    private static class joinGame_argsTupleScheme extends TupleScheme<joinGame_args> {

      @Override
      public void write(TProtocol prot, joinGame_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(TProtocol prot, joinGame_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class joinGame_result implements TBase<joinGame_result, joinGame_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("joinGame_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField TIME_OUT_EXCEPTION_FIELD_DESC = new TField("timeOutException", TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new joinGame_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new joinGame_resultTupleSchemeFactory());
    }

    public GameInfo success; // required
    public TimeoutException timeOutException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      TIME_OUT_EXCEPTION((short)1, "timeOutException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // TIME_OUT_EXCEPTION
            return TIME_OUT_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT,
          new StructMetaData(TType.STRUCT, GameInfo.class)));
      tmpMap.put(_Fields.TIME_OUT_EXCEPTION, new FieldMetaData("timeOutException", TFieldRequirementType.DEFAULT,
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(joinGame_result.class, metaDataMap);
    }

    public joinGame_result() {
    }

    public joinGame_result(
      GameInfo success,
      TimeoutException timeOutException)
    {
      this();
      this.success = success;
      this.timeOutException = timeOutException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public joinGame_result(joinGame_result other) {
      if (other.isSetSuccess()) {
        this.success = new GameInfo(other.success);
      }
      if (other.isSetTimeOutException()) {
        this.timeOutException = new TimeoutException(other.timeOutException);
      }
    }

    public joinGame_result deepCopy() {
      return new joinGame_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.timeOutException = null;
    }

    public GameInfo getSuccess() {
      return this.success;
    }

    public joinGame_result setSuccess(GameInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TimeoutException getTimeOutException() {
      return this.timeOutException;
    }

    public joinGame_result setTimeOutException(TimeoutException timeOutException) {
      this.timeOutException = timeOutException;
      return this;
    }

    public void unsetTimeOutException() {
      this.timeOutException = null;
    }

    /** Returns true if field timeOutException is set (has been assigned a value) and false otherwise */
    public boolean isSetTimeOutException() {
      return this.timeOutException != null;
    }

    public void setTimeOutExceptionIsSet(boolean value) {
      if (!value) {
        this.timeOutException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((GameInfo)value);
        }
        break;

      case TIME_OUT_EXCEPTION:
        if (value == null) {
          unsetTimeOutException();
        } else {
          setTimeOutException((TimeoutException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case TIME_OUT_EXCEPTION:
        return getTimeOutException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case TIME_OUT_EXCEPTION:
        return isSetTimeOutException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof joinGame_result)
        return this.equals((joinGame_result)that);
      return false;
    }

    public boolean equals(joinGame_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_timeOutException = true && this.isSetTimeOutException();
      boolean that_present_timeOutException = true && that.isSetTimeOutException();
      if (this_present_timeOutException || that_present_timeOutException) {
        if (!(this_present_timeOutException && that_present_timeOutException))
          return false;
        if (!this.timeOutException.equals(that.timeOutException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(joinGame_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      joinGame_result typedOther = (joinGame_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTimeOutException()).compareTo(typedOther.isSetTimeOutException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimeOutException()) {
        lastComparison = TBaseHelper.compareTo(this.timeOutException, typedOther.timeOutException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("joinGame_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("timeOutException:");
      if (this.timeOutException == null) {
        sb.append("null");
      } else {
        sb.append(this.timeOutException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new TCompactProtocol(new TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new TCompactProtocol(new TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class joinGame_resultStandardSchemeFactory implements SchemeFactory {
      public joinGame_resultStandardScheme getScheme() {
        return new joinGame_resultStandardScheme();
      }
    }

    private static class joinGame_resultStandardScheme extends StandardScheme<joinGame_result> {

      public void read(TProtocol iprot, joinGame_result struct) throws TException {
        TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == TType.STRUCT) {
                struct.success = new GameInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // TIME_OUT_EXCEPTION
              if (schemeField.type == TType.STRUCT) {
                struct.timeOutException = new TimeoutException();
                struct.timeOutException.read(iprot);
                struct.setTimeOutExceptionIsSet(true);
              } else { 
                TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(TProtocol oprot, joinGame_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.timeOutException != null) {
          oprot.writeFieldBegin(TIME_OUT_EXCEPTION_FIELD_DESC);
          struct.timeOutException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class joinGame_resultTupleSchemeFactory implements SchemeFactory {
      public joinGame_resultTupleScheme getScheme() {
        return new joinGame_resultTupleScheme();
      }
    }

    private static class joinGame_resultTupleScheme extends TupleScheme<joinGame_result> {

      @Override
      public void write(TProtocol prot, joinGame_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetTimeOutException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetTimeOutException()) {
          struct.timeOutException.write(oprot);
        }
      }

      @Override
      public void read(TProtocol prot, joinGame_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new GameInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.timeOutException = new TimeoutException();
          struct.timeOutException.read(iprot);
          struct.setTimeOutExceptionIsSet(true);
        }
      }
    }

  }

  public static class waitForStart_args implements TBase<waitForStart_args, waitForStart_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("waitForStart_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new waitForStart_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new waitForStart_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(waitForStart_args.class, metaDataMap);
    }

    public waitForStart_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public waitForStart_args(waitForStart_args other) {
    }

    public waitForStart_args deepCopy() {
      return new waitForStart_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof waitForStart_args)
        return this.equals((waitForStart_args)that);
      return false;
    }

    public boolean equals(waitForStart_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(waitForStart_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      waitForStart_args typedOther = (waitForStart_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("waitForStart_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new TCompactProtocol(new TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new TCompactProtocol(new TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class waitForStart_argsStandardSchemeFactory implements SchemeFactory {
      public waitForStart_argsStandardScheme getScheme() {
        return new waitForStart_argsStandardScheme();
      }
    }

    private static class waitForStart_argsStandardScheme extends StandardScheme<waitForStart_args> {

      public void read(TProtocol iprot, waitForStart_args struct) throws TException {
        TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            default:
              TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(TProtocol oprot, waitForStart_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class waitForStart_argsTupleSchemeFactory implements SchemeFactory {
      public waitForStart_argsTupleScheme getScheme() {
        return new waitForStart_argsTupleScheme();
      }
    }

    private static class waitForStart_argsTupleScheme extends TupleScheme<waitForStart_args> {

      @Override
      public void write(TProtocol prot, waitForStart_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(TProtocol prot, waitForStart_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class waitForStart_result implements TBase<waitForStart_result, waitForStart_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("waitForStart_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BYTE, (short)0);
    private static final TField TIME_OUT_EXCEPTION_FIELD_DESC = new TField("timeOutException", TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new waitForStart_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new waitForStart_resultTupleSchemeFactory());
    }

    public byte success; // required
    public TimeoutException timeOutException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      TIME_OUT_EXCEPTION((short)1, "timeOutException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // TIME_OUT_EXCEPTION
            return TIME_OUT_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT,
          new FieldValueMetaData(TType.BYTE)));
      tmpMap.put(_Fields.TIME_OUT_EXCEPTION, new FieldMetaData("timeOutException", TFieldRequirementType.DEFAULT,
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(waitForStart_result.class, metaDataMap);
    }

    public waitForStart_result() {
    }

    public waitForStart_result(
      byte success,
      TimeoutException timeOutException)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.timeOutException = timeOutException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public waitForStart_result(waitForStart_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetTimeOutException()) {
        this.timeOutException = new TimeoutException(other.timeOutException);
      }
    }

    public waitForStart_result deepCopy() {
      return new waitForStart_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.timeOutException = null;
    }

    public byte getSuccess() {
      return this.success;
    }

    public waitForStart_result setSuccess(byte success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public TimeoutException getTimeOutException() {
      return this.timeOutException;
    }

    public waitForStart_result setTimeOutException(TimeoutException timeOutException) {
      this.timeOutException = timeOutException;
      return this;
    }

    public void unsetTimeOutException() {
      this.timeOutException = null;
    }

    /** Returns true if field timeOutException is set (has been assigned a value) and false otherwise */
    public boolean isSetTimeOutException() {
      return this.timeOutException != null;
    }

    public void setTimeOutExceptionIsSet(boolean value) {
      if (!value) {
        this.timeOutException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Byte)value);
        }
        break;

      case TIME_OUT_EXCEPTION:
        if (value == null) {
          unsetTimeOutException();
        } else {
          setTimeOutException((TimeoutException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Byte.valueOf(getSuccess());

      case TIME_OUT_EXCEPTION:
        return getTimeOutException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case TIME_OUT_EXCEPTION:
        return isSetTimeOutException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof waitForStart_result)
        return this.equals((waitForStart_result)that);
      return false;
    }

    public boolean equals(waitForStart_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_timeOutException = true && this.isSetTimeOutException();
      boolean that_present_timeOutException = true && that.isSetTimeOutException();
      if (this_present_timeOutException || that_present_timeOutException) {
        if (!(this_present_timeOutException && that_present_timeOutException))
          return false;
        if (!this.timeOutException.equals(that.timeOutException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(waitForStart_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      waitForStart_result typedOther = (waitForStart_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTimeOutException()).compareTo(typedOther.isSetTimeOutException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimeOutException()) {
        lastComparison = TBaseHelper.compareTo(this.timeOutException, typedOther.timeOutException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("waitForStart_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("timeOutException:");
      if (this.timeOutException == null) {
        sb.append("null");
      } else {
        sb.append(this.timeOutException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new TCompactProtocol(new TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new TCompactProtocol(new TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class waitForStart_resultStandardSchemeFactory implements SchemeFactory {
      public waitForStart_resultStandardScheme getScheme() {
        return new waitForStart_resultStandardScheme();
      }
    }

    private static class waitForStart_resultStandardScheme extends StandardScheme<waitForStart_result> {

      public void read(TProtocol iprot, waitForStart_result struct) throws TException {
        TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == TType.BYTE) {
                struct.success = iprot.readByte();
                struct.setSuccessIsSet(true);
              } else { 
                TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // TIME_OUT_EXCEPTION
              if (schemeField.type == TType.STRUCT) {
                struct.timeOutException = new TimeoutException();
                struct.timeOutException.read(iprot);
                struct.setTimeOutExceptionIsSet(true);
              } else { 
                TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(TProtocol oprot, waitForStart_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeByte(struct.success);
        oprot.writeFieldEnd();
        if (struct.timeOutException != null) {
          oprot.writeFieldBegin(TIME_OUT_EXCEPTION_FIELD_DESC);
          struct.timeOutException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class waitForStart_resultTupleSchemeFactory implements SchemeFactory {
      public waitForStart_resultTupleScheme getScheme() {
        return new waitForStart_resultTupleScheme();
      }
    }

    private static class waitForStart_resultTupleScheme extends TupleScheme<waitForStart_result> {

      @Override
      public void write(TProtocol prot, waitForStart_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetTimeOutException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeByte(struct.success);
        }
        if (struct.isSetTimeOutException()) {
          struct.timeOutException.write(oprot);
        }
      }

      @Override
      public void read(TProtocol prot, waitForStart_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readByte();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.timeOutException = new TimeoutException();
          struct.timeOutException.read(iprot);
          struct.setTimeOutExceptionIsSet(true);
        }
      }
    }

  }

  public static class getMapState_args implements TBase<getMapState_args, getMapState_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getMapState_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMapState_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMapState_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getMapState_args.class, metaDataMap);
    }

    public getMapState_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMapState_args(getMapState_args other) {
    }

    public getMapState_args deepCopy() {
      return new getMapState_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMapState_args)
        return this.equals((getMapState_args)that);
      return false;
    }

    public boolean equals(getMapState_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getMapState_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getMapState_args typedOther = (getMapState_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMapState_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new TCompactProtocol(new TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new TCompactProtocol(new TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMapState_argsStandardSchemeFactory implements SchemeFactory {
      public getMapState_argsStandardScheme getScheme() {
        return new getMapState_argsStandardScheme();
      }
    }

    private static class getMapState_argsStandardScheme extends StandardScheme<getMapState_args> {

      public void read(TProtocol iprot, getMapState_args struct) throws TException {
        TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            default:
              TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(TProtocol oprot, getMapState_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMapState_argsTupleSchemeFactory implements SchemeFactory {
      public getMapState_argsTupleScheme getScheme() {
        return new getMapState_argsTupleScheme();
      }
    }

    private static class getMapState_argsTupleScheme extends TupleScheme<getMapState_args> {

      @Override
      public void write(TProtocol prot, getMapState_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(TProtocol prot, getMapState_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getMapState_result implements TBase<getMapState_result, getMapState_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getMapState_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMapState_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMapState_resultTupleSchemeFactory());
    }

    public MapState success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT,
          new StructMetaData(TType.STRUCT, MapState.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getMapState_result.class, metaDataMap);
    }

    public getMapState_result() {
    }

    public getMapState_result(
      MapState success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMapState_result(getMapState_result other) {
      if (other.isSetSuccess()) {
        this.success = new MapState(other.success);
      }
    }

    public getMapState_result deepCopy() {
      return new getMapState_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public MapState getSuccess() {
      return this.success;
    }

    public getMapState_result setSuccess(MapState success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MapState)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMapState_result)
        return this.equals((getMapState_result)that);
      return false;
    }

    public boolean equals(getMapState_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getMapState_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getMapState_result typedOther = (getMapState_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMapState_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new TCompactProtocol(new TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new TCompactProtocol(new TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMapState_resultStandardSchemeFactory implements SchemeFactory {
      public getMapState_resultStandardScheme getScheme() {
        return new getMapState_resultStandardScheme();
      }
    }

    private static class getMapState_resultStandardScheme extends StandardScheme<getMapState_result> {

      public void read(TProtocol iprot, getMapState_result struct) throws TException {
        TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == TType.STRUCT) {
                struct.success = new MapState();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(TProtocol oprot, getMapState_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMapState_resultTupleSchemeFactory implements SchemeFactory {
      public getMapState_resultTupleScheme getScheme() {
        return new getMapState_resultTupleScheme();
      }
    }

    private static class getMapState_resultTupleScheme extends TupleScheme<getMapState_result> {

      @Override
      public void write(TProtocol prot, getMapState_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(TProtocol prot, getMapState_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new MapState();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}

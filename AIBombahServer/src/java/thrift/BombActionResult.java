/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift;

import thrift.meta_data.FieldMetaData;
import thrift.meta_data.StructMetaData;
import thrift.protocol.*;
import thrift.scheme.IScheme;
import thrift.scheme.SchemeFactory;
import thrift.scheme.StandardScheme;

import thrift.scheme.TupleScheme;
import thrift.transport.TIOStreamTransport;

import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;

public class BombActionResult implements TBase<BombActionResult, BombActionResult._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("BombActionResult");

  private static final TField MY_STATE_FIELD_DESC = new TField("myState", TType.STRUCT, (short)1);
  private static final TField MAP_STATE_FIELD_DESC = new TField("mapState", TType.STRUCT, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BombActionResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BombActionResultTupleSchemeFactory());
  }

  public PlayerState myState; // required
  public MapState mapState; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    MY_STATE((short)1, "myState"),
    MAP_STATE((short)2, "mapState");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MY_STATE
          return MY_STATE;
        case 2: // MAP_STATE
          return MAP_STATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MY_STATE, new FieldMetaData("myState", TFieldRequirementType.DEFAULT,
        new StructMetaData(TType.STRUCT, PlayerState.class)));
    tmpMap.put(_Fields.MAP_STATE, new FieldMetaData("mapState", TFieldRequirementType.DEFAULT,
        new StructMetaData(TType.STRUCT, MapState.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(BombActionResult.class, metaDataMap);
  }

  public BombActionResult() {
  }

  public BombActionResult(
    PlayerState myState,
    MapState mapState)
  {
    this();
    this.myState = myState;
    this.mapState = mapState;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BombActionResult(BombActionResult other) {
    if (other.isSetMyState()) {
      this.myState = new PlayerState(other.myState);
    }
    if (other.isSetMapState()) {
      this.mapState = new MapState(other.mapState);
    }
  }

  public BombActionResult deepCopy() {
    return new BombActionResult(this);
  }

  @Override
  public void clear() {
    this.myState = null;
    this.mapState = null;
  }

  public PlayerState getMyState() {
    return this.myState;
  }

  public BombActionResult setMyState(PlayerState myState) {
    this.myState = myState;
    return this;
  }

  public void unsetMyState() {
    this.myState = null;
  }

  /** Returns true if field myState is set (has been assigned a value) and false otherwise */
  public boolean isSetMyState() {
    return this.myState != null;
  }

  public void setMyStateIsSet(boolean value) {
    if (!value) {
      this.myState = null;
    }
  }

  public MapState getMapState() {
    return this.mapState;
  }

  public BombActionResult setMapState(MapState mapState) {
    this.mapState = mapState;
    return this;
  }

  public void unsetMapState() {
    this.mapState = null;
  }

  /** Returns true if field mapState is set (has been assigned a value) and false otherwise */
  public boolean isSetMapState() {
    return this.mapState != null;
  }

  public void setMapStateIsSet(boolean value) {
    if (!value) {
      this.mapState = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MY_STATE:
      if (value == null) {
        unsetMyState();
      } else {
        setMyState((PlayerState)value);
      }
      break;

    case MAP_STATE:
      if (value == null) {
        unsetMapState();
      } else {
        setMapState((MapState)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MY_STATE:
      return getMyState();

    case MAP_STATE:
      return getMapState();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MY_STATE:
      return isSetMyState();
    case MAP_STATE:
      return isSetMapState();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BombActionResult)
      return this.equals((BombActionResult)that);
    return false;
  }

  public boolean equals(BombActionResult that) {
    if (that == null)
      return false;

    boolean this_present_myState = true && this.isSetMyState();
    boolean that_present_myState = true && that.isSetMyState();
    if (this_present_myState || that_present_myState) {
      if (!(this_present_myState && that_present_myState))
        return false;
      if (!this.myState.equals(that.myState))
        return false;
    }

    boolean this_present_mapState = true && this.isSetMapState();
    boolean that_present_mapState = true && that.isSetMapState();
    if (this_present_mapState || that_present_mapState) {
      if (!(this_present_mapState && that_present_mapState))
        return false;
      if (!this.mapState.equals(that.mapState))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(BombActionResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    BombActionResult typedOther = (BombActionResult)other;

    lastComparison = Boolean.valueOf(isSetMyState()).compareTo(typedOther.isSetMyState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMyState()) {
      lastComparison = TBaseHelper.compareTo(this.myState, typedOther.myState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMapState()).compareTo(typedOther.isSetMapState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMapState()) {
      lastComparison = TBaseHelper.compareTo(this.mapState, typedOther.mapState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BombActionResult(");
    boolean first = true;

    sb.append("myState:");
    if (this.myState == null) {
      sb.append("null");
    } else {
      sb.append(this.myState);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mapState:");
    if (this.mapState == null) {
      sb.append("null");
    } else {
      sb.append(this.mapState);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new TCompactProtocol(new TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new TCompactProtocol(new TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BombActionResultStandardSchemeFactory implements SchemeFactory {
    public BombActionResultStandardScheme getScheme() {
      return new BombActionResultStandardScheme();
    }
  }

  private static class BombActionResultStandardScheme extends StandardScheme<BombActionResult> {

    public void read(TProtocol iprot, BombActionResult struct) throws TException {
      TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // MY_STATE
            if (schemeField.type == TType.STRUCT) {
              struct.myState = new PlayerState();
              struct.myState.read(iprot);
              struct.setMyStateIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MAP_STATE
            if (schemeField.type == TType.STRUCT) {
              struct.mapState = new MapState();
              struct.mapState.read(iprot);
              struct.setMapStateIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(TProtocol oprot, BombActionResult struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.myState != null) {
        oprot.writeFieldBegin(MY_STATE_FIELD_DESC);
        struct.myState.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.mapState != null) {
        oprot.writeFieldBegin(MAP_STATE_FIELD_DESC);
        struct.mapState.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BombActionResultTupleSchemeFactory implements SchemeFactory {
    public BombActionResultTupleScheme getScheme() {
      return new BombActionResultTupleScheme();
    }
  }

  private static class BombActionResultTupleScheme extends TupleScheme<BombActionResult> {

    @Override
    public void write(TProtocol prot, BombActionResult struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMyState()) {
        optionals.set(0);
      }
      if (struct.isSetMapState()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetMyState()) {
        struct.myState.write(oprot);
      }
      if (struct.isSetMapState()) {
        struct.mapState.write(oprot);
      }
    }

    @Override
    public void read(TProtocol prot, BombActionResult struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.myState = new PlayerState();
        struct.myState.read(iprot);
        struct.setMyStateIsSet(true);
      }
      if (incoming.get(1)) {
        struct.mapState = new MapState();
        struct.mapState.read(iprot);
        struct.setMapStateIsSet(true);
      }
    }
  }

}


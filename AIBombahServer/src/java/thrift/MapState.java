/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift;

import thrift.meta_data.*;
import thrift.protocol.*;
import thrift.scheme.IScheme;
import thrift.scheme.SchemeFactory;
import thrift.scheme.StandardScheme;

import thrift.scheme.TupleScheme;
import thrift.transport.TIOStreamTransport;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;

public class MapState implements TBase<MapState, MapState._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("MapState");

  private static final TField TILES_FIELD_DESC = new TField("tiles", TType.LIST, (short)1);
  private static final TField BOMBS_FIELD_DESC = new TField("bombs", TType.LIST, (short)2);
  private static final TField PLAYERS_FIELD_DESC = new TField("players", TType.LIST, (short)3);
  private static final TField TICKS_REMAINING_FIELD_DESC = new TField("ticksRemaining", TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MapStateStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MapStateTupleSchemeFactory());
  }

  public List<Tile> tiles; // required
  public List<BombState> bombs; // required
  public List<PlayerState> players; // required
  public int ticksRemaining; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    TILES((short)1, "tiles"),
    BOMBS((short)2, "bombs"),
    PLAYERS((short)3, "players"),
    TICKS_REMAINING((short)4, "ticksRemaining");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TILES
          return TILES;
        case 2: // BOMBS
          return BOMBS;
        case 3: // PLAYERS
          return PLAYERS;
        case 4: // TICKS_REMAINING
          return TICKS_REMAINING;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TICKSREMAINING_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);
  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TILES, new FieldMetaData("tiles", TFieldRequirementType.DEFAULT,
        new ListMetaData(TType.LIST,
            new EnumMetaData(TType.ENUM, Tile.class))));
    tmpMap.put(_Fields.BOMBS, new FieldMetaData("bombs", TFieldRequirementType.DEFAULT,
        new ListMetaData(TType.LIST,
            new StructMetaData(TType.STRUCT, BombState.class))));
    tmpMap.put(_Fields.PLAYERS, new FieldMetaData("players", TFieldRequirementType.DEFAULT,
        new ListMetaData(TType.LIST,
            new StructMetaData(TType.STRUCT, PlayerState.class))));
    tmpMap.put(_Fields.TICKS_REMAINING, new FieldMetaData("ticksRemaining", TFieldRequirementType.DEFAULT,
        new FieldValueMetaData(TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(MapState.class, metaDataMap);
  }

  public MapState() {
  }

  public MapState(
    List<Tile> tiles,
    List<BombState> bombs,
    List<PlayerState> players,
    int ticksRemaining)
  {
    this();
    this.tiles = tiles;
    this.bombs = bombs;
    this.players = players;
    this.ticksRemaining = ticksRemaining;
    setTicksRemainingIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MapState(MapState other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetTiles()) {
      List<Tile> __this__tiles = new ArrayList<Tile>();
      for (Tile other_element : other.tiles) {
        __this__tiles.add(other_element);
      }
      this.tiles = __this__tiles;
    }
    if (other.isSetBombs()) {
      List<BombState> __this__bombs = new ArrayList<BombState>();
      for (BombState other_element : other.bombs) {
        __this__bombs.add(new BombState(other_element));
      }
      this.bombs = __this__bombs;
    }
    if (other.isSetPlayers()) {
      List<PlayerState> __this__players = new ArrayList<PlayerState>();
      for (PlayerState other_element : other.players) {
        __this__players.add(new PlayerState(other_element));
      }
      this.players = __this__players;
    }
    this.ticksRemaining = other.ticksRemaining;
  }

  public MapState deepCopy() {
    return new MapState(this);
  }

  @Override
  public void clear() {
    this.tiles = null;
    this.bombs = null;
    this.players = null;
    setTicksRemainingIsSet(false);
    this.ticksRemaining = 0;
  }

  public int getTilesSize() {
    return (this.tiles == null) ? 0 : this.tiles.size();
  }

  public java.util.Iterator<Tile> getTilesIterator() {
    return (this.tiles == null) ? null : this.tiles.iterator();
  }

  public void addToTiles(Tile elem) {
    if (this.tiles == null) {
      this.tiles = new ArrayList<Tile>();
    }
    this.tiles.add(elem);
  }

  public List<Tile> getTiles() {
    return this.tiles;
  }

  public MapState setTiles(List<Tile> tiles) {
    this.tiles = tiles;
    return this;
  }

  public void unsetTiles() {
    this.tiles = null;
  }

  /** Returns true if field tiles is set (has been assigned a value) and false otherwise */
  public boolean isSetTiles() {
    return this.tiles != null;
  }

  public void setTilesIsSet(boolean value) {
    if (!value) {
      this.tiles = null;
    }
  }

  public int getBombsSize() {
    return (this.bombs == null) ? 0 : this.bombs.size();
  }

  public java.util.Iterator<BombState> getBombsIterator() {
    return (this.bombs == null) ? null : this.bombs.iterator();
  }

  public void addToBombs(BombState elem) {
    if (this.bombs == null) {
      this.bombs = new ArrayList<BombState>();
    }
    this.bombs.add(elem);
  }

  public List<BombState> getBombs() {
    return this.bombs;
  }

  public MapState setBombs(List<BombState> bombs) {
    this.bombs = bombs;
    return this;
  }

  public void unsetBombs() {
    this.bombs = null;
  }

  /** Returns true if field bombs is set (has been assigned a value) and false otherwise */
  public boolean isSetBombs() {
    return this.bombs != null;
  }

  public void setBombsIsSet(boolean value) {
    if (!value) {
      this.bombs = null;
    }
  }

  public int getPlayersSize() {
    return (this.players == null) ? 0 : this.players.size();
  }

  public java.util.Iterator<PlayerState> getPlayersIterator() {
    return (this.players == null) ? null : this.players.iterator();
  }

  public void addToPlayers(PlayerState elem) {
    if (this.players == null) {
      this.players = new ArrayList<PlayerState>();
    }
    this.players.add(elem);
  }

  public List<PlayerState> getPlayers() {
    return this.players;
  }

  public MapState setPlayers(List<PlayerState> players) {
    this.players = players;
    return this;
  }

  public void unsetPlayers() {
    this.players = null;
  }

  /** Returns true if field players is set (has been assigned a value) and false otherwise */
  public boolean isSetPlayers() {
    return this.players != null;
  }

  public void setPlayersIsSet(boolean value) {
    if (!value) {
      this.players = null;
    }
  }

  public int getTicksRemaining() {
    return this.ticksRemaining;
  }

  public MapState setTicksRemaining(int ticksRemaining) {
    this.ticksRemaining = ticksRemaining;
    setTicksRemainingIsSet(true);
    return this;
  }

  public void unsetTicksRemaining() {
    __isset_bit_vector.clear(__TICKSREMAINING_ISSET_ID);
  }

  /** Returns true if field ticksRemaining is set (has been assigned a value) and false otherwise */
  public boolean isSetTicksRemaining() {
    return __isset_bit_vector.get(__TICKSREMAINING_ISSET_ID);
  }

  public void setTicksRemainingIsSet(boolean value) {
    __isset_bit_vector.set(__TICKSREMAINING_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TILES:
      if (value == null) {
        unsetTiles();
      } else {
        setTiles((List<Tile>)value);
      }
      break;

    case BOMBS:
      if (value == null) {
        unsetBombs();
      } else {
        setBombs((List<BombState>)value);
      }
      break;

    case PLAYERS:
      if (value == null) {
        unsetPlayers();
      } else {
        setPlayers((List<PlayerState>)value);
      }
      break;

    case TICKS_REMAINING:
      if (value == null) {
        unsetTicksRemaining();
      } else {
        setTicksRemaining((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TILES:
      return getTiles();

    case BOMBS:
      return getBombs();

    case PLAYERS:
      return getPlayers();

    case TICKS_REMAINING:
      return Integer.valueOf(getTicksRemaining());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TILES:
      return isSetTiles();
    case BOMBS:
      return isSetBombs();
    case PLAYERS:
      return isSetPlayers();
    case TICKS_REMAINING:
      return isSetTicksRemaining();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MapState)
      return this.equals((MapState)that);
    return false;
  }

  public boolean equals(MapState that) {
    if (that == null)
      return false;

    boolean this_present_tiles = true && this.isSetTiles();
    boolean that_present_tiles = true && that.isSetTiles();
    if (this_present_tiles || that_present_tiles) {
      if (!(this_present_tiles && that_present_tiles))
        return false;
      if (!this.tiles.equals(that.tiles))
        return false;
    }

    boolean this_present_bombs = true && this.isSetBombs();
    boolean that_present_bombs = true && that.isSetBombs();
    if (this_present_bombs || that_present_bombs) {
      if (!(this_present_bombs && that_present_bombs))
        return false;
      if (!this.bombs.equals(that.bombs))
        return false;
    }

    boolean this_present_players = true && this.isSetPlayers();
    boolean that_present_players = true && that.isSetPlayers();
    if (this_present_players || that_present_players) {
      if (!(this_present_players && that_present_players))
        return false;
      if (!this.players.equals(that.players))
        return false;
    }

    boolean this_present_ticksRemaining = true;
    boolean that_present_ticksRemaining = true;
    if (this_present_ticksRemaining || that_present_ticksRemaining) {
      if (!(this_present_ticksRemaining && that_present_ticksRemaining))
        return false;
      if (this.ticksRemaining != that.ticksRemaining)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(MapState other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    MapState typedOther = (MapState)other;

    lastComparison = Boolean.valueOf(isSetTiles()).compareTo(typedOther.isSetTiles());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTiles()) {
      lastComparison = TBaseHelper.compareTo(this.tiles, typedOther.tiles);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBombs()).compareTo(typedOther.isSetBombs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBombs()) {
      lastComparison = TBaseHelper.compareTo(this.bombs, typedOther.bombs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlayers()).compareTo(typedOther.isSetPlayers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlayers()) {
      lastComparison = TBaseHelper.compareTo(this.players, typedOther.players);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTicksRemaining()).compareTo(typedOther.isSetTicksRemaining());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicksRemaining()) {
      lastComparison = TBaseHelper.compareTo(this.ticksRemaining, typedOther.ticksRemaining);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MapState(");
    boolean first = true;

    sb.append("tiles:");
    if (this.tiles == null) {
      sb.append("null");
    } else {
      sb.append(this.tiles);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bombs:");
    if (this.bombs == null) {
      sb.append("null");
    } else {
      sb.append(this.bombs);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("players:");
    if (this.players == null) {
      sb.append("null");
    } else {
      sb.append(this.players);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ticksRemaining:");
    sb.append(this.ticksRemaining);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new TCompactProtocol(new TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new TCompactProtocol(new TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MapStateStandardSchemeFactory implements SchemeFactory {
    public MapStateStandardScheme getScheme() {
      return new MapStateStandardScheme();
    }
  }

  private static class MapStateStandardScheme extends StandardScheme<MapState> {

    public void read(TProtocol iprot, MapState struct) throws TException {
      TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // TILES
            if (schemeField.type == TType.LIST) {
              {
                TList _list0 = iprot.readListBegin();
                struct.tiles = new ArrayList<Tile>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  Tile _elem2; // required
                  _elem2 = Tile.findByValue(iprot.readI32());
                  struct.tiles.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setTilesIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BOMBS
            if (schemeField.type == TType.LIST) {
              {
                TList _list3 = iprot.readListBegin();
                struct.bombs = new ArrayList<BombState>(_list3.size);
                for (int _i4 = 0; _i4 < _list3.size; ++_i4)
                {
                  BombState _elem5; // required
                  _elem5 = new BombState();
                  _elem5.read(iprot);
                  struct.bombs.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.setBombsIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PLAYERS
            if (schemeField.type == TType.LIST) {
              {
                TList _list6 = iprot.readListBegin();
                struct.players = new ArrayList<PlayerState>(_list6.size);
                for (int _i7 = 0; _i7 < _list6.size; ++_i7)
                {
                  PlayerState _elem8; // required
                  _elem8 = new PlayerState();
                  _elem8.read(iprot);
                  struct.players.add(_elem8);
                }
                iprot.readListEnd();
              }
              struct.setPlayersIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TICKS_REMAINING
            if (schemeField.type == TType.I32) {
              struct.ticksRemaining = iprot.readI32();
              struct.setTicksRemainingIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(TProtocol oprot, MapState struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.tiles != null) {
        oprot.writeFieldBegin(TILES_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.I32, struct.tiles.size()));
          for (Tile _iter9 : struct.tiles)
          {
            oprot.writeI32(_iter9.getValue());
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.bombs != null) {
        oprot.writeFieldBegin(BOMBS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, struct.bombs.size()));
          for (BombState _iter10 : struct.bombs)
          {
            _iter10.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.players != null) {
        oprot.writeFieldBegin(PLAYERS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, struct.players.size()));
          for (PlayerState _iter11 : struct.players)
          {
            _iter11.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TICKS_REMAINING_FIELD_DESC);
      oprot.writeI32(struct.ticksRemaining);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MapStateTupleSchemeFactory implements SchemeFactory {
    public MapStateTupleScheme getScheme() {
      return new MapStateTupleScheme();
    }
  }

  private static class MapStateTupleScheme extends TupleScheme<MapState> {

    @Override
    public void write(TProtocol prot, MapState struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTiles()) {
        optionals.set(0);
      }
      if (struct.isSetBombs()) {
        optionals.set(1);
      }
      if (struct.isSetPlayers()) {
        optionals.set(2);
      }
      if (struct.isSetTicksRemaining()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetTiles()) {
        {
          oprot.writeI32(struct.tiles.size());
          for (Tile _iter12 : struct.tiles)
          {
            oprot.writeI32(_iter12.getValue());
          }
        }
      }
      if (struct.isSetBombs()) {
        {
          oprot.writeI32(struct.bombs.size());
          for (BombState _iter13 : struct.bombs)
          {
            _iter13.write(oprot);
          }
        }
      }
      if (struct.isSetPlayers()) {
        {
          oprot.writeI32(struct.players.size());
          for (PlayerState _iter14 : struct.players)
          {
            _iter14.write(oprot);
          }
        }
      }
      if (struct.isSetTicksRemaining()) {
        oprot.writeI32(struct.ticksRemaining);
      }
    }

    @Override
    public void read(TProtocol prot, MapState struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        {
          TList _list15 = new TList(TType.I32, iprot.readI32());
          struct.tiles = new ArrayList<Tile>(_list15.size);
          for (int _i16 = 0; _i16 < _list15.size; ++_i16)
          {
            Tile _elem17; // required
            _elem17 = Tile.findByValue(iprot.readI32());
            struct.tiles.add(_elem17);
          }
        }
        struct.setTilesIsSet(true);
      }
      if (incoming.get(1)) {
        {
          TList _list18 = new TList(TType.STRUCT, iprot.readI32());
          struct.bombs = new ArrayList<BombState>(_list18.size);
          for (int _i19 = 0; _i19 < _list18.size; ++_i19)
          {
            BombState _elem20; // required
            _elem20 = new BombState();
            _elem20.read(iprot);
            struct.bombs.add(_elem20);
          }
        }
        struct.setBombsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          TList _list21 = new TList(TType.STRUCT, iprot.readI32());
          struct.players = new ArrayList<PlayerState>(_list21.size);
          for (int _i22 = 0; _i22 < _list21.size; ++_i22)
          {
            PlayerState _elem23; // required
            _elem23 = new PlayerState();
            _elem23.read(iprot);
            struct.players.add(_elem23);
          }
        }
        struct.setPlayersIsSet(true);
      }
      if (incoming.get(3)) {
        struct.ticksRemaining = iprot.readI32();
        struct.setTicksRemainingIsSet(true);
      }
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift;

import thrift.meta_data.FieldMetaData;
import thrift.protocol.*;
import thrift.scheme.IScheme;
import thrift.scheme.SchemeFactory;
import thrift.scheme.StandardScheme;

import thrift.scheme.TupleScheme;
import thrift.meta_data.FieldValueMetaData;
import thrift.transport.TIOStreamTransport;

import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;

public class BombAction implements TBase<BombAction, BombAction._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("BombAction");

  private static final TField CHAIN_BOMBS_FIELD_DESC = new TField("chainBombs", TType.BOOL, (short)1);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BombActionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BombActionTupleSchemeFactory());
  }

  public boolean chainBombs; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    CHAIN_BOMBS((short)1, "chainBombs");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CHAIN_BOMBS
          return CHAIN_BOMBS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CHAINBOMBS_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);
  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CHAIN_BOMBS, new FieldMetaData("chainBombs", TFieldRequirementType.DEFAULT,
        new FieldValueMetaData(TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(BombAction.class, metaDataMap);
  }

  public BombAction() {
  }

  public BombAction(
    boolean chainBombs)
  {
    this();
    this.chainBombs = chainBombs;
    setChainBombsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BombAction(BombAction other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.chainBombs = other.chainBombs;
  }

  public BombAction deepCopy() {
    return new BombAction(this);
  }

  @Override
  public void clear() {
    setChainBombsIsSet(false);
    this.chainBombs = false;
  }

  public boolean isChainBombs() {
    return this.chainBombs;
  }

  public BombAction setChainBombs(boolean chainBombs) {
    this.chainBombs = chainBombs;
    setChainBombsIsSet(true);
    return this;
  }

  public void unsetChainBombs() {
    __isset_bit_vector.clear(__CHAINBOMBS_ISSET_ID);
  }

  /** Returns true if field chainBombs is set (has been assigned a value) and false otherwise */
  public boolean isSetChainBombs() {
    return __isset_bit_vector.get(__CHAINBOMBS_ISSET_ID);
  }

  public void setChainBombsIsSet(boolean value) {
    __isset_bit_vector.set(__CHAINBOMBS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CHAIN_BOMBS:
      if (value == null) {
        unsetChainBombs();
      } else {
        setChainBombs((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CHAIN_BOMBS:
      return Boolean.valueOf(isChainBombs());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CHAIN_BOMBS:
      return isSetChainBombs();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BombAction)
      return this.equals((BombAction)that);
    return false;
  }

  public boolean equals(BombAction that) {
    if (that == null)
      return false;

    boolean this_present_chainBombs = true;
    boolean that_present_chainBombs = true;
    if (this_present_chainBombs || that_present_chainBombs) {
      if (!(this_present_chainBombs && that_present_chainBombs))
        return false;
      if (this.chainBombs != that.chainBombs)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(BombAction other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    BombAction typedOther = (BombAction)other;

    lastComparison = Boolean.valueOf(isSetChainBombs()).compareTo(typedOther.isSetChainBombs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChainBombs()) {
      lastComparison = TBaseHelper.compareTo(this.chainBombs, typedOther.chainBombs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BombAction(");
    boolean first = true;

    sb.append("chainBombs:");
    sb.append(this.chainBombs);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new TCompactProtocol(new TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new TCompactProtocol(new TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BombActionStandardSchemeFactory implements SchemeFactory {
    public BombActionStandardScheme getScheme() {
      return new BombActionStandardScheme();
    }
  }

  private static class BombActionStandardScheme extends StandardScheme<BombAction> {

    public void read(TProtocol iprot, BombAction struct) throws TException {
      TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // CHAIN_BOMBS
            if (schemeField.type == TType.BOOL) {
              struct.chainBombs = iprot.readBool();
              struct.setChainBombsIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(TProtocol oprot, BombAction struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CHAIN_BOMBS_FIELD_DESC);
      oprot.writeBool(struct.chainBombs);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BombActionTupleSchemeFactory implements SchemeFactory {
    public BombActionTupleScheme getScheme() {
      return new BombActionTupleScheme();
    }
  }

  private static class BombActionTupleScheme extends TupleScheme<BombAction> {

    @Override
    public void write(TProtocol prot, BombAction struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetChainBombs()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetChainBombs()) {
        oprot.writeBool(struct.chainBombs);
      }
    }

    @Override
    public void read(TProtocol prot, BombAction struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.chainBombs = iprot.readBool();
        struct.setChainBombsIsSet(true);
      }
    }
  }

}


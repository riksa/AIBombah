//
// Autogenerated by Thrift Compiler (0.8.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

BombahService_ping_args = function(args) {
};
BombahService_ping_args.prototype = {};
BombahService_ping_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BombahService_ping_args.prototype.write = function(output) {
  output.writeStructBegin('BombahService_ping_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BombahService_ping_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BombahService_ping_result.prototype = {};
BombahService_ping_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BombahService_ping_result.prototype.write = function(output) {
  output.writeStructBegin('BombahService_ping_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BombahService_controllerEvent_args = function(args) {
  this.controllerState = null;
  if (args) {
    if (args.controllerState !== undefined) {
      this.controllerState = args.controllerState;
    }
  }
};
BombahService_controllerEvent_args.prototype = {};
BombahService_controllerEvent_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.controllerState = new ControllerState();
        this.controllerState.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BombahService_controllerEvent_args.prototype.write = function(output) {
  output.writeStructBegin('BombahService_controllerEvent_args');
  if (this.controllerState) {
    output.writeFieldBegin('controllerState', Thrift.Type.STRUCT, 1);
    this.controllerState.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BombahService_controllerEvent_result = function(args) {
  this.success = null;
  this.youAreDead = null;
  this.gameOver = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.youAreDead !== undefined) {
      this.youAreDead = args.youAreDead;
    }
    if (args.gameOver !== undefined) {
      this.gameOver = args.gameOver;
    }
  }
};
BombahService_controllerEvent_result.prototype = {};
BombahService_controllerEvent_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ControllerResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.youAreDead = new YouAreDeadException();
        this.youAreDead.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.gameOver = new GameOverException();
        this.gameOver.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BombahService_controllerEvent_result.prototype.write = function(output) {
  output.writeStructBegin('BombahService_controllerEvent_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.youAreDead) {
    output.writeFieldBegin('youAreDead', Thrift.Type.STRUCT, 1);
    this.youAreDead.write(output);
    output.writeFieldEnd();
  }
  if (this.gameOver) {
    output.writeFieldBegin('gameOver', Thrift.Type.STRUCT, 2);
    this.gameOver.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BombahService_move_args = function(args) {
  this.moveAction = null;
  if (args) {
    if (args.moveAction !== undefined) {
      this.moveAction = args.moveAction;
    }
  }
};
BombahService_move_args.prototype = {};
BombahService_move_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.moveAction = new MoveAction();
        this.moveAction.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BombahService_move_args.prototype.write = function(output) {
  output.writeStructBegin('BombahService_move_args');
  if (this.moveAction) {
    output.writeFieldBegin('moveAction', Thrift.Type.STRUCT, 1);
    this.moveAction.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BombahService_move_result = function(args) {
  this.success = null;
  this.youAreDead = null;
  this.gameOver = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.youAreDead !== undefined) {
      this.youAreDead = args.youAreDead;
    }
    if (args.gameOver !== undefined) {
      this.gameOver = args.gameOver;
    }
  }
};
BombahService_move_result.prototype = {};
BombahService_move_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new MoveActionResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.youAreDead = new YouAreDeadException();
        this.youAreDead.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.gameOver = new GameOverException();
        this.gameOver.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BombahService_move_result.prototype.write = function(output) {
  output.writeStructBegin('BombahService_move_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.youAreDead) {
    output.writeFieldBegin('youAreDead', Thrift.Type.STRUCT, 1);
    this.youAreDead.write(output);
    output.writeFieldEnd();
  }
  if (this.gameOver) {
    output.writeFieldBegin('gameOver', Thrift.Type.STRUCT, 2);
    this.gameOver.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BombahService_bomb_args = function(args) {
  this.bombAction = null;
  if (args) {
    if (args.bombAction !== undefined) {
      this.bombAction = args.bombAction;
    }
  }
};
BombahService_bomb_args.prototype = {};
BombahService_bomb_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.bombAction = new BombAction();
        this.bombAction.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BombahService_bomb_args.prototype.write = function(output) {
  output.writeStructBegin('BombahService_bomb_args');
  if (this.bombAction) {
    output.writeFieldBegin('bombAction', Thrift.Type.STRUCT, 1);
    this.bombAction.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BombahService_bomb_result = function(args) {
  this.success = null;
  this.youAreDead = null;
  this.gameOver = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.youAreDead !== undefined) {
      this.youAreDead = args.youAreDead;
    }
    if (args.gameOver !== undefined) {
      this.gameOver = args.gameOver;
    }
  }
};
BombahService_bomb_result.prototype = {};
BombahService_bomb_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new BombActionResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.youAreDead = new YouAreDeadException();
        this.youAreDead.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.gameOver = new GameOverException();
        this.gameOver.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BombahService_bomb_result.prototype.write = function(output) {
  output.writeStructBegin('BombahService_bomb_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.youAreDead) {
    output.writeFieldBegin('youAreDead', Thrift.Type.STRUCT, 1);
    this.youAreDead.write(output);
    output.writeFieldEnd();
  }
  if (this.gameOver) {
    output.writeFieldBegin('gameOver', Thrift.Type.STRUCT, 2);
    this.gameOver.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BombahService_waitTicks_args = function(args) {
  this.ticks = null;
  if (args) {
    if (args.ticks !== undefined) {
      this.ticks = args.ticks;
    }
  }
};
BombahService_waitTicks_args.prototype = {};
BombahService_waitTicks_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.ticks = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BombahService_waitTicks_args.prototype.write = function(output) {
  output.writeStructBegin('BombahService_waitTicks_args');
  if (this.ticks) {
    output.writeFieldBegin('ticks', Thrift.Type.I32, 1);
    output.writeI32(this.ticks);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BombahService_waitTicks_result = function(args) {
  this.success = null;
  this.youAreDead = null;
  this.gameOver = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.youAreDead !== undefined) {
      this.youAreDead = args.youAreDead;
    }
    if (args.gameOver !== undefined) {
      this.gameOver = args.gameOver;
    }
  }
};
BombahService_waitTicks_result.prototype = {};
BombahService_waitTicks_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new MapState();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.youAreDead = new YouAreDeadException();
        this.youAreDead.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.gameOver = new GameOverException();
        this.gameOver.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BombahService_waitTicks_result.prototype.write = function(output) {
  output.writeStructBegin('BombahService_waitTicks_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.youAreDead) {
    output.writeFieldBegin('youAreDead', Thrift.Type.STRUCT, 1);
    this.youAreDead.write(output);
    output.writeFieldEnd();
  }
  if (this.gameOver) {
    output.writeFieldBegin('gameOver', Thrift.Type.STRUCT, 2);
    this.gameOver.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BombahService_joinGame_args = function(args) {
};
BombahService_joinGame_args.prototype = {};
BombahService_joinGame_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BombahService_joinGame_args.prototype.write = function(output) {
  output.writeStructBegin('BombahService_joinGame_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BombahService_joinGame_result = function(args) {
  this.success = null;
  this.timeOutException = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.timeOutException !== undefined) {
      this.timeOutException = args.timeOutException;
    }
  }
};
BombahService_joinGame_result.prototype = {};
BombahService_joinGame_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new GameInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.timeOutException = new TimeoutException();
        this.timeOutException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BombahService_joinGame_result.prototype.write = function(output) {
  output.writeStructBegin('BombahService_joinGame_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.timeOutException) {
    output.writeFieldBegin('timeOutException', Thrift.Type.STRUCT, 1);
    this.timeOutException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BombahService_waitForStart_args = function(args) {
};
BombahService_waitForStart_args.prototype = {};
BombahService_waitForStart_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BombahService_waitForStart_args.prototype.write = function(output) {
  output.writeStructBegin('BombahService_waitForStart_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BombahService_waitForStart_result = function(args) {
  this.success = null;
  this.timeOutException = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.timeOutException !== undefined) {
      this.timeOutException = args.timeOutException;
    }
  }
};
BombahService_waitForStart_result.prototype = {};
BombahService_waitForStart_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BYTE) {
        this.success = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.timeOutException = new TimeoutException();
        this.timeOutException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BombahService_waitForStart_result.prototype.write = function(output) {
  output.writeStructBegin('BombahService_waitForStart_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BYTE, 0);
    output.writeByte(this.success);
    output.writeFieldEnd();
  }
  if (this.timeOutException) {
    output.writeFieldBegin('timeOutException', Thrift.Type.STRUCT, 1);
    this.timeOutException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BombahService_getMapState_args = function(args) {
};
BombahService_getMapState_args.prototype = {};
BombahService_getMapState_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BombahService_getMapState_args.prototype.write = function(output) {
  output.writeStructBegin('BombahService_getMapState_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BombahService_getMapState_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
BombahService_getMapState_result.prototype = {};
BombahService_getMapState_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new MapState();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BombahService_getMapState_result.prototype.write = function(output) {
  output.writeStructBegin('BombahService_getMapState_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BombahServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
BombahServiceClient.prototype = {};
BombahServiceClient.prototype.ping = function(callback) {
  if (callback === undefined) {
    this.send_ping();
    return this.recv_ping();
  } else {
    var postData = this.send_ping(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_ping);
  }
};

BombahServiceClient.prototype.send_ping = function(callback) {
  this.output.writeMessageBegin('ping', Thrift.MessageType.CALL, this.seqid);
  var args = new BombahService_ping_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

BombahServiceClient.prototype.recv_ping = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BombahService_ping_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'ping failed: unknown result';
};
BombahServiceClient.prototype.controllerEvent = function(controllerState, callback) {
  if (callback === undefined) {
    this.send_controllerEvent(controllerState);
    return this.recv_controllerEvent();
  } else {
    var postData = this.send_controllerEvent(controllerState, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_controllerEvent);
  }
};

BombahServiceClient.prototype.send_controllerEvent = function(controllerState, callback) {
  this.output.writeMessageBegin('controllerEvent', Thrift.MessageType.CALL, this.seqid);
  var args = new BombahService_controllerEvent_args();
  args.controllerState = controllerState;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

BombahServiceClient.prototype.recv_controllerEvent = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BombahService_controllerEvent_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.youAreDead) {
    throw result.youAreDead;
  }
  if (null !== result.gameOver) {
    throw result.gameOver;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'controllerEvent failed: unknown result';
};
BombahServiceClient.prototype.move = function(moveAction, callback) {
  if (callback === undefined) {
    this.send_move(moveAction);
    return this.recv_move();
  } else {
    var postData = this.send_move(moveAction, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_move);
  }
};

BombahServiceClient.prototype.send_move = function(moveAction, callback) {
  this.output.writeMessageBegin('move', Thrift.MessageType.CALL, this.seqid);
  var args = new BombahService_move_args();
  args.moveAction = moveAction;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

BombahServiceClient.prototype.recv_move = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BombahService_move_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.youAreDead) {
    throw result.youAreDead;
  }
  if (null !== result.gameOver) {
    throw result.gameOver;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'move failed: unknown result';
};
BombahServiceClient.prototype.bomb = function(bombAction, callback) {
  if (callback === undefined) {
    this.send_bomb(bombAction);
    return this.recv_bomb();
  } else {
    var postData = this.send_bomb(bombAction, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_bomb);
  }
};

BombahServiceClient.prototype.send_bomb = function(bombAction, callback) {
  this.output.writeMessageBegin('bomb', Thrift.MessageType.CALL, this.seqid);
  var args = new BombahService_bomb_args();
  args.bombAction = bombAction;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

BombahServiceClient.prototype.recv_bomb = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BombahService_bomb_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.youAreDead) {
    throw result.youAreDead;
  }
  if (null !== result.gameOver) {
    throw result.gameOver;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'bomb failed: unknown result';
};
BombahServiceClient.prototype.waitTicks = function(ticks, callback) {
  if (callback === undefined) {
    this.send_waitTicks(ticks);
    return this.recv_waitTicks();
  } else {
    var postData = this.send_waitTicks(ticks, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_waitTicks);
  }
};

BombahServiceClient.prototype.send_waitTicks = function(ticks, callback) {
  this.output.writeMessageBegin('waitTicks', Thrift.MessageType.CALL, this.seqid);
  var args = new BombahService_waitTicks_args();
  args.ticks = ticks;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

BombahServiceClient.prototype.recv_waitTicks = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BombahService_waitTicks_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.youAreDead) {
    throw result.youAreDead;
  }
  if (null !== result.gameOver) {
    throw result.gameOver;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'waitTicks failed: unknown result';
};
BombahServiceClient.prototype.joinGame = function(callback) {
  if (callback === undefined) {
    this.send_joinGame();
    return this.recv_joinGame();
  } else {
    var postData = this.send_joinGame(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_joinGame);
  }
};

BombahServiceClient.prototype.send_joinGame = function(callback) {
  this.output.writeMessageBegin('joinGame', Thrift.MessageType.CALL, this.seqid);
  var args = new BombahService_joinGame_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

BombahServiceClient.prototype.recv_joinGame = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BombahService_joinGame_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.timeOutException) {
    throw result.timeOutException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'joinGame failed: unknown result';
};
BombahServiceClient.prototype.waitForStart = function(callback) {
  if (callback === undefined) {
    this.send_waitForStart();
    return this.recv_waitForStart();
  } else {
    var postData = this.send_waitForStart(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_waitForStart);
  }
};

BombahServiceClient.prototype.send_waitForStart = function(callback) {
  this.output.writeMessageBegin('waitForStart', Thrift.MessageType.CALL, this.seqid);
  var args = new BombahService_waitForStart_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

BombahServiceClient.prototype.recv_waitForStart = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BombahService_waitForStart_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.timeOutException) {
    throw result.timeOutException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'waitForStart failed: unknown result';
};
BombahServiceClient.prototype.getMapState = function(callback) {
  if (callback === undefined) {
    this.send_getMapState();
    return this.recv_getMapState();
  } else {
    var postData = this.send_getMapState(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getMapState);
  }
};

BombahServiceClient.prototype.send_getMapState = function(callback) {
  this.output.writeMessageBegin('getMapState', Thrift.MessageType.CALL, this.seqid);
  var args = new BombahService_getMapState_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

BombahServiceClient.prototype.recv_getMapState = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new BombahService_getMapState_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getMapState failed: unknown result';
};
